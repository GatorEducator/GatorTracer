{
    "CMPSC 100: Computational Expression, Allegheny College, Spring 2021": {
        "cmpsc-100-week-0-configuration-Yanqiao4396": "# CMPSC 100: Spring 2021, Week 0\n\n* Distributed: 23 February 2021\n* Due: 28 Februrary 2021\n\n---\n\n<div class=\"alert alert-block alert-info\">\n    These various parts of this assignment are important for making progress in the course. The various point values of the components reflect this.\n</div>\n\n|Type         |Point value |\n|-------------|------------|\n|Worksheets   |20 pts.     |\n|Lab          |10 pts.     |\n|Participation|15 pts.     |\n|             |            |\n|Total        |55 pts.     |\n|             |5.5% of course |\n\n## Table of contents\n\n---\n\n### Week 0: Configuration\n\nFor those who just want to get to work, consult the `Instructional Materials` section. However, for folks who want to walk through activites with explanations, some context or history, and general folderol/frivolity, start at [Worksheets and activities](#Worksheets-and-activities).\n\n* [Overview](#Overview)\n* [Instructional materials](#Instructional-materials)\n  * [Media](#Media)\n  * [Worksheets and activities](#Worksheets-and-activities)\n  * [Lab](#Lab)\n* [The \"terminal\"](#The-\"terminal\")\n  * [What is a \"terminal\"?](#What-is-a-\"terminal\"?)\n  * [Using our terminal](#Using-our-terminal)\n* [GitHub: Part 0](#GitHub:-Part-0)\n  * [0.0.0: Securing your GitHub account](#Worksheet-0:-Securing-your-GitHub-account)\n  * [0.0.1: \"Cloning\" a repository](#Worksheet-1:-\"Cloning\"-a-repository)\n* [The terminal revisited](#The-terminal-revisited)\n  * [0.0.2: Terminal commands](#Worksheet-2:-Terminal-commands)\n* [Markdown](#Markdown)\n  * [0.0.3: Basic markdown](#Worksheet-3:-Basic-markdown)\n  \n#### Lab: _The Maltese Python_ and submitting work\n\n* [Lab: _The Maltese Python_](#Lab:-The-Maltese-Python)\n* [Take a break](#Take-a-break)\n  * [GatorGrader](#GatorGrader)\n    * [0.0.4: Checking your work](#Worksheet-4:-Checking-your-work)\n  * [GitHub: Part 1](#GitHub:-Part-1)\n    * [0.0.5: \"Committing\" to a repository](#Worksheet-5:-\"Committing\"-to-a-repository)\n\n## Overview\n\n---\n\nStarting the week, we explore setting up the tools, technologies, and platforms that will guide our work this semester. These include:\n\n* The \"terminal\"\n* GitHub\n  * \"Cloning\" a repository\n  * \"Committing\" a repository\n* JupyterLab\n* Markdown\n* GatorGrader\n\nWe'll also start looking at the basic of the Python programming language with a couple of detours into how and why programming languages and computational systems work.\n\nFollow the links below to access instructional materials for the week. Each `.ipynb` file is a `Jupyter notebook` (more on this later) which contains discussion, instruction, and activities -- some meant for use during class video sessions, others to be complete on your own. Simply double-click on it in the file tree to the right to open it in a new tab.\n\n### Before we start\n\nThis week features a lot more \"fiddly\" parts than many of our upcoming weeks. This may require a bit more patience on your part; these steps are very important to having a successful class.\n\nOf course, as will always be true throughout the semester, I am committed to making sure that these steps go as smoothly as possible and, where they might not, I will gladly offer assistance.\n\nI give you my final prefatory note about assistance: **please do not hesitate to ask for it**. As I write in the course [Syllabus](https://github.com/allegheny-college-cmpsc-100-spring-2021/course-materials#syllabus):\n\n> [h]istorically, students who are successful in my courses visit and discuss course concepts with the instructor and Technical Leaders early and often.\n\nTrue, that.\n\n## Evaluation\n\n---\n\nThis assignment will be evaluated according to the following guidelines.\n\n### Worksheets\n\n#### Week 0 - Worksheet 3 - Markdown.md:\n\n* Three (3) `heading`s\n* Two (2) `list`s\n* One (1) `image`\n* One (1) descriptive paragraph\n\n### Lab: _The Maltese Python_\n\n* No `TODO` markers\n* `the_maltese_python.png` placed in `cage/` folder`\n\n## Instructional materials\n\n---\n\n### Media\n\nClick the images below the headers to launch videos.\n\n#### SSH keys\n\n[![YouTube thumbnail](https://i3.ytimg.com/vi/qEPjUGQFmzQ/hqdefault.jpg)](https://www.youtube.com/watch?v=qEPjUGQFmzQ)\n\n#### Markdown\n\n[![YouTube thumbnail](https://i3.ytimg.com/vi/s-oSuHFVnR4/hqdefault.jpg)](https://www.youtube.com/watch?v=s-oSuHFVnR4)\n\n### Worksheets and activities\n\n* [0.0.0: Securing your GitHub account](worksheets/0_week-0-worksheet-ssh-keys.md)\n* [0.0.1: \"Cloning\" a repository](worksheets/1_week-0-worksheet-github-clone.md)\n* [0.0.2: Terminal commands](worksheets/2_week-0-worksheet-basic-terminal.ipynb)\n* [0.0.3: Markdown](worksheets/3_week-0-worksheet-markdown.ipynb)\n  * [0.0.3a: Markdown file](worksheets/3a_week-0-worksheet-markdown.md)\n* [0.0.4: GatorGrader](worksheets/4_week-0-worksheet-gatorgrader.ipynb)\n* [0.0.5: Worksheet 5 - \"Committing\" to a repository](worksheets/5_week-0-worksheet-github-push.ipynb)\n\n## The \"terminal\"\n\n---\n\n> [f]rom the mid 1970's to the mid 1980's, most people used real text-terminals to communicate with large computers....They consisted only of a screen, keyboard, and only enough memory to store a screenfull or so of text (a few kilobytes). Users typed in programs, ran programs, wrote documents, issued printing commands, etc. A cable connected the terminal to the computer (often indirectly). It was called a terminal since it was located at the terminal end of this cable.\n>\n> David S. Lawyer, [1.7 What is a Text-Terminal?](https://linux.die.net/HOWTO/Text-Terminal-HOWTO-1.html#ss1.7)\n\n### What is a \"terminal\"?\n\nThe discussion above provides good history with an eye toward why we still use the word \"terminal\" to describe the interface we use to issue commands to a system. While we're not beholden to [room-sized computers anymore](https://en.wikipedia.org/wiki/UNIVAC), you're not exactly sitting in front of the server running any of the programs we use. Ergo, you need an interface that serves the same purpose as a historical \"terminal\": an \"endpoint\" used to issue different system or programming commands.\n\n### Using our terminal\n\nWhenever we're using JupyterLab, it's probably a good idea to have a terminal open, as we will see now and in the coming weeks.\n\nThere are two ways to launch a terminal in JupyterLab:\n\n#### File menu\n\n* From the `File` menu, select the `New` option\n* In the resulting sub-menu, click `Terminal`\n\nThis will open a new tab for an active terminal.\n\n#### Launcher tab\n\n<div class=\"alert alert-block alert-warning\">\n  It's possible that you've closed your <b>Launcher</b> tab. In that case:\n    <ul>\n        <li>you can either launch the terminal from the <b>File</b> menu</li> \n        <li>or create a new <b>Launcher</b> from the same place</li>\n    </ul>\n</div>\n\n* Locate the `Launcher` tab at the top of this window\n* Under the `Other` heading, click the `Terminal` tile\n\nThis will open a new tab for an active terminal.\n\n## GitHub: Part 1\n\n---\n\nGitHub is the platform that we're going to use to distribute and store our code.\n\n### \"Repositories\"\n\nSimply put, a \"repository\" is a collection of files and folders from a \"snapshot\" taken at a given point in time. This text is contained in such a repository. What's even better: repositories \"remember\" previous versions of themselves. In fact, you can _always_ go back and get a previous \"snapshot\".\n\nWe use a program called `git` to take and manage different versions of our files. `git` is referred to as a `Version Control System (VCS)`.\n\n#### What is a \"GitHub\", then?\n\nThe quasi portmanteau \"GitHub\" is really what it says: a hub for `git` repositories. There are many other places on the internet that provide the service that GitHub does, but it's the largest such service out there.\n\n(It has that sweet Microsoft money now.)\n\nOne of GitHub's services is something called GitHub Classroom -- a tool that allows me to create assignments, give them to you, and enables you to create your own complete copy of them in a [repository](#\"Repositories\").\n\n### Worksheet 0: Securing your GitHub account\n\n* [Week 0 - Worksheet 0 - Securing your GitHub account](worksheets/0_week-0-worksheet-ssh-keys.md)\n\n### Worksheet 1: \"Cloning\" a repository\n\n* [Week 0 - Worksheet 1 - \"Cloning\" a repository](worksheets/1_week-0-worksheet-github-clone.md)\n\n## The terminal revisited\n\n---\n\n### Basic commands\n\nIn this course, you may learn some more handy terminal commands. However, we generally can get by with the following three (3):\n\n* `cd`\n* `ls`\n* `pwd`\n\n#### `cd`\n\n* Stands for **c**hange **d**irectory\n* Allows users to move \"up\" and \"down\" a file \"tree\"\n  * Think: going from one place to another\n* Easy way to remember: `I want to go to...`\n\n#### `ls`\n\n* Stands for **l**i**s**t\n* Lists the contents of a directory\n* Easy way to remember: `I want to look around.`\n\n#### `pwd`\n\n* Stands for **p**ath to **w**orking **d**irectory\n* Shows the directory you're currently in\n* Easy way to remember: `Where am I?`\n\n### Worksheet 2: Terminal commands\n\nThe following worksheet provides some guided practice with these basic terminal commands.\n\n* [Week 0 - Worksheet 2 - Terminal commands](worksheets/2_week-0-worksheet-basic-terminal.ipynb)\n\n## Markdown\n\n---\n\nWhile we are the Department of Computer Science, a large majority of our work is actually writing. For this (and documents like this one!) we use something called \"Markdown.\"\n\nThe following worksheet introduces and provides an opportunity to practice with basic markdown.\n\n### Worksheet 3: Markdown\n\n* [Week 0 - Worksheet 3 - Markdown](worksheets/3_week-0-worksheet-markdown.ipynb)\n\n## Lab: _The Maltese Python_\n\n---\n\n<p align = \"center\">\n    <img src = \"https://cs.allegheny.edu/sites/dluman/cmpsc100/cmpsc-100-maltese-python.png\" alt=\"It's a fake!\" width = \"400\">\n</p>\n\n> My way of learning is to heave a wild and unpredictable monkey-wrench into the machinery.\n>\n> Dashiell Hammett, _The Maltese Falcon_\n\nIn 2021 a professor attempted to boggle their students' minds by sending them a game in which they hid a Golden Python whose scales were conjured from digital text\u2014an enterprising computer system seized this priceless token and the fate of the Maltese Python remains a mystery to this day...\n\nIt is hidden somewhere in the `/mansion`, but it is up to _you_ to find and `claim` it.\n\n* [Lab: _The Maltese Python_](lab/week-0-lab.ipynb)\n\n## Take a break\n\n---\n\nWell, after this -- knowing that the first half of your work is submitted.\n\n### GatorGrader\n\nGatorGrader is an automated tool that allows you to grade your assignments according to specifications that I set out in the [grading criteria](#Grading-criteria). The following worksheet teaches you how to run it:\n\n#### Worksheet 4: Checking your work\n\n* [Week 0 - Worksheet 4 - GatorGrader](worksheets/4_week-0-worksheet-gatorgrader.ipynb)\n\n### GitHub: Part 1\n\nThe final step in turning or saving assignments is to `commit` (or `push`) the content to GitHub. Complete the steps in the following worksheet to learn how to complete the process.\n\n#### Worksheet 5: \"Committing\" to a repository\n\n* [Week 0 - Worksheet 5 - \"Committing\" to a repository](worksheets/5_week-0-worksheet-github-push.ipynb)\n\n#### A strong warning\n\n<div class=\"alert alert-block alert-danger\">\n    <p><strong>While we may use this server to store code, <u>you</u> are responsible for using GitHub as your main backup.</strong></p>\n    <p>While I back this server up on a regular basis, I cannot guarantee that I'll have the ability to restore up-to-the-minute data for your work.</p>\n    <p>Remember: to err is human; to back up your work is divine.</p>\n</div>\n",
        "cmpsc-100-week-1-python-basics-Yanqiao4396": "# CMPSC 100: Spring 2021, Week 01\n\n* Distributed: 1 March 2021\n* Due: 7 March 2021\n\n## Point values\n\n---\n\n|Type         |Point value |\n|-------------|------------|\n|Worksheets   |10 pts.     |\n|Lab          |20 pts.     |\n|Participation|15 pts.     |\n|             |            |\n|Total        |45 pts.     |\n|             |4.5% of course |\n\n## Table of contents\n\nFor those who just want to get to work, consult the `Instructional Materials` section. Else, for additional summary or context, read the additional sections included.\n\n* [Accepting the assignment](#Accepting-the-assignment)\n* [Overview](#Overview)\n  * [Evaluation](#Evaluation)\n* [Instructional materials](#Instructional-materials)\n  * [Worksheets and activities](#Worksheets-and-activities)\n  * [Lab](#Lab)\n* [Python basics](#Python-basics)\n  * [What is programming?](#What-is-programming?)\n  * [What is a programming language?](#What-is-a-programming-language?)\n  * [Why Python?](#Why-Python?)\n* [Syntax](#Syntax)\n* [Data types](#Data-types)\n* [Lab activity: G. Wiz and the lousy lottery](#Lab)\n* [Wrap-up](#Wrap-up)\n  * [GatorGrader](#GatorGrader)\n  * [Submitting your work](#Submitting-your-work)\n  \n## Accepting the assignment\n\n---\n\n- [ ] Log into the `#assignments` channel in our class [Slack](https://cmpsc-100-sp-2021.slack.com)\n- [ ] Click the link provided for the lab assignment and accept it in GitHub classroom\n- [ ] Once the assignment finishes building, click the link to go to your personal repository assignment\n\n## \"Cloning\" a repository\n\n### Using the correct download link\n\n- [ ] On this repository's page, click the `Clone or download` button in the upper right hand corner\n* You may need to scroll up to see it\n- [ ] In the upper right corner of the box that appears, click `Use SSH`\n- [ ] Copy the link that appears in the textbox below the phrase \"Use a password with a protected key.\"\n\n#### Cloning\n\n* [ ] Type `ls` in your terminal window\n* You should be in your `~` directory\n- [ ] Once there, \"clone\" the repository using the link copied above\n* If I (the instructor) were to clone my own repository, I'd enter (your link will look different):\n\n```\ngit clone git@github.com:allegheny-college-cmpsc-100-spring-2021/cmpsc-100-week-01-python-basics-dluman\n```\n\n## Overview\n\n## Evaluation\n\n### Worksheets\n\n* Responses to all questions or blank cells\n\n### Lab \n\n* See individual [lab guidelines](lab/week-1-lab.md#Requirements)\n\n# Instructional materials\n\n## Worksheets and activities\n\n* [Week 01, Worksheet 0: Python syntax (expressions)](worksheets/0_week-1-worksheet-expressions.ipynb)\n* [Week 01, Worksheet 1: Python syntax (assignments)](worksheets/1_week-1-worksheet-expressions.ipynb)\n\n## Lab\n\n# Python basics\n\n## What is programming?\n\nThe job of a programming language is to solve problems. You can think of it like this:\n\n![Yep, definitely nothing here.](https://cs.allegheny.edu/sites/dluman/cmpsc100/cmpsc-100-black-box.png)\n\nA programmer, then, has the task of writing the thing in the box -- the program that takes the `inputs` and turns them into understandable, desirable, or interesting `outputs`. That, in itself, constitutes a kind of magic; skilled magicians can look into the box and understand the \"code\" of the trick, but mostly folks who use programs expect them to do whatever it is they do, and don't generally are too much about how the trick is done.\n\nIn this class, we're interested in how the tricks are done.\n\n## What is a programming language?\n\nA programming language is the tool that programmers use to solve those above-referenced problems. There are many, and each have their own distinct advantages and drawbacks in addition to working in vastly different ways. Some languages are better for embedding directly on microchips; others are best used for making applications that live on the Internet.\n\nWhile most contemporary computer languages are referred to as \"Turing Complete\" (meaning that a programmer should be able to do everything in language \"B\" that they could do with language \"A\"), professional programmers constantly contend with using the language that's \"right\" for a given job. Many programmers are hired because of skill in one particular language that they use throughout their career. Others like to learn as many as they can and dabble in pushing languages to their limits.\n\nYet, still, programmers are susceptible to comfort and personal bias. Typically, programmers play favorites with languages and many have strong opinions about the set of languages they use. \n\nThere is no \"universal\" programming language, and many projects rely on a combination of them to work. \n\n## Why Python?\n\nSimply put, Python follows Bushnell's Law of being \"[easy to learn and difficult to master](https://en.wikipedia.org/wiki/Bushnell%27s_Law).\" Mostly, you can start to do cool stuff fast.\n\nMore importantly, Python offers a great introduction to what programming languages _should be able to do_. I cannot (and would not) promise that you'll leave this class as a master of the Python language. Mastery shouldn't be the end goal. In fact, [Python has changed quite a bit](https://www.python.org/dev/peps/) since its introduction in 1991, so it's hard for anyone to truly master something that keeps moving.\n\nPython is also an _interpreted_ language -- which means there's no compiler. This means that you run code directly from the text that creates it without any intermediate steps.\n\nAs we learn Python in this course, it's best to keep on eye on _what_ it's doing and _how_ it's doing it. This is the \"trick\" that we're interested in.\n\n## \"Syntax\"\n\n> Colorless green ideas sleep furiously.\n>\n> Noam Chomsky\n\nMakes sense, right? Well, not really. But here's the thing: it is a 100% \"correct\" English-language sentence. We know this because languages (including Python) have a specific way of being arranged called \"syntax.\" Let's break the above down to demonstrate\n\n| Word      | Function  |\n|-----------|-----------|\n| Colorless | adjective |\n| green     | adjective |\n| ideas     | noun      |\n| sleep     | verb      |\n| furiously | adverb    |\n\n\nSo yeah -- colorless green ideas do, indeed, sleep furiously.\n\n<div class=\"alert alert-block alert-info\">\n    <b>PROTIP:</b> Like for colorless green ideas, sleep is important.\n</div>\n\nPython also has a \"syntax\" or \"way of speaking.\" Though there is more to it than we'll talk about here, the common features in how the language organizes itself are:\n\n* statements, which are:\n  * expressions\n  * assignments\n  * function calls\n* comments\n\n### Statements\n\nComplete syntactic units in Python are referred to as \"statements.\" A statement represents a complete thought or small operation. Each complete statement takes up one (1) physical written line. The line count of a Python program can range from one (1) to several thousand.\n\nStatements are _functional_ which means that they _do something_:\n\n* a calculation\n* create text\n* store values\n* modify values\n\nIn the following set of worksheets, we explore statements and the various ways that Python constructs its syntax.\n\n* [Week 01, Worksheet 0: Python syntax (expressions)](worksheets/0_week-1-worksheet-expressions.ipynb)\n* [Week 01, Worksheet 1: Python syntax (assignments)](worksheets/1_week-1-worksheet-assignments.ipynb)\n\n## Data types\n\n* [Week 01, Worksheet 2: Data types](worksheets/2_week-1-worksheet-data-types.ipynb)\n\n# Lab activity: G. Wiz and the lousy lottery\n\n* [G. Wiz and the lousy lottery](lab/week-1-lab.md)\n\n## Wrap-up\n\n---\n\n### GatorGrader\n\nGatorGrader is an Allegheny College-developed, student-written and maintained application that grades your work for you. The long and short of it, before and when you turn in your assignments, you can know what your approximate grade will be.\n\n(It doesn't do _everything_ for us, but it gives us a good starting point for evaluating your work.)\n\nYou don't need to do anything to get it -- I will distribute all the files you need with every repository. You realize the following benefits:\n\n* Complete grading transparency\n* Grading criteria _never_ changes\n* The criteria is very specific; you will know what changes you need to make\n\nThis application runs in your terminal tab, and can grade:\n\n* The whole repository\n* Just worksheets\n* Just the lab\n\n## Checking your work\n\n---\n\nNo matter where you are in your repository, the command to start and run GatorGrader is always the same:\n\n```\ngradle grade\n```\n\nHowever, you need to be _in the right place_ to get the right result. The following table summarizes the various grading locations.\n\n| Location | Grading             |\n|----------|---------------------|\n| `worksheets/` | Worksheet requirements |\n| `lab/`        | Lab requirements |\n\n### Submitting the assignment/saving progress\n\nThe GitHub platform is a place to store your work. So, it makes some sense that should be able to _clone_ (download) from it, and push back (upload) to it. Here, we'll learn this second part.\n\n- [ ] `cd` to your `~` folder\n- [ ] Locate the `cmpsc-100-week-01-python-basics` folder and `cd` to it.\n\nOnce in this folder, we need to tell git that there have been changes.\n\n- [ ] Type `git add .` and press `Enter`\n* This tells git to look through the _entire_ folder structure for new changes and \"stage\" them\n\n- [ ] Type `git commit -m \"{Commit message}\"` to \"label\" the commit\n* This is typically something like `git commit -m \"Fixing a typo\"` -- the message in quotes should be as descriptive as possible, while still remaining somewhat short\n\n- [ ] To send all changes to the server, type `git push`\n- [ ] At the prompt, input the password associated with the `SSH Key` you created earlier in this exercise (yesterday)\n\nOnce the process finishes successfully, we're done!\n\n#### A strong warning\n\n<div class=\"alert alert-block alert-danger\">\n    <p><strong>While we may use this server to store code, <u>you</u> are responsible for using GitHub as your main backup.</strong></p>\n    <p>While I back this server up on a regular basis, I cannot guarantee that I'll have the ability to restore up-to-the-minute data for your work.</p>\n    <p>Remember: to err is human; to back up your work is divine.</p>\n</div>",
        "cmpsc-100-week-2-more-python-basics-Yanqiao4396": "# CMPSC 100: Spring 2021, Week 02\n\n* Distributed: 8 March 2021\n* Due: 14 March 2021\n\n## Point values\n\n---\n\n|Type         |Point value |\n|-------------|------------|\n|Worksheets   |10 pts.     |\n|Lab          |20 pts.     |\n|Participation|15 pts.     |\n|             |            |\n|Total        |45 pts.     |\n|             |4.5% of course |\n\n## Table of contents\n\nFor those who just want to get to work, consult the `Instructional Materials` section. Else, for additional summary or context, read the additional sections included.\n\n* [Accepting the assignment](#Accepting-the-assignment)\n* [Overview](#Overview)\n  * [Evaluation](#Evaluation)\n* [Instructional materials](#Instructional-materials)\n  * [Worksheets and activities](#Worksheets-and-activities)\n  * [Lab](#Lab)\n* [Python basics](#Python-basics)\n  * [What is programming?](#What-is-programming?)\n  * [What is a programming language?](#What-is-a-programming-language?)\n  * [Why Python?](#Why-Python?)\n* [Syntax](#Syntax)\n* [Data types](#Data-types)\n* [Lab activity: G. Wiz and the Catnap Caper](#Lab)\n* [Wrap-up](#Wrap-up)\n  * [GatorGrader](#GatorGrader)\n  * [Submitting your work](#Submitting-your-work)\n  \n## Accepting the assignment\n\n---\n\n- [ ] Log into the `#assignments` channel in our class [Slack](https://cmpsc-100-sp-2021.slack.com)\n- [ ] Click the link provided for the lab assignment and accept it in GitHub classroom\n- [ ] Once the assignment finishes building, click the link to go to your personal repository assignment\n\n## \"Cloning\" a repository\n\n### Using the correct download link\n\n- [ ] On this repository's page, click the `Clone or download` button in the upper right hand corner\n* You may need to scroll up to see it\n- [ ] In the upper right corner of the box that appears, click `Use SSH`\n- [ ] Copy the link that appears in the textbox below the phrase \"Use a password with a protected key.\"\n\n#### Cloning\n\n* [ ] Type `ls` in your terminal window\n* You should be in your `~` directory\n- [ ] Once there, \"clone\" the repository using the link copied above\n* If I (the instructor) were to clone my own repository, I'd enter (your link will look different):\n\n```\ngit clone git@github.com:allegheny-college-cmpsc-100-spring-2021/cmpsc-100-week-2-python-basics-dluman\n```\n\n## Overview\n\n## Evaluation\n\n### Worksheets\n\n* Responses to all questions or blank cells\n\n### Lab \n\n* See individual [lab guidelines](lab/week-2-lab.md#Requirements)\n\n# Instructional materials\n\n## Worksheets and activities\n\n* [Week 2, Worksheet 0: Data Types - Booleans](worksheets/0_week-2-worksheet-data-types-booleans.ipynb)\n* [Week 2, Worksheet 2: `if` statements](worksheets/1_week-2-worksheet-if-statements.ipynb)\n* [Week 2, Worksheet 2: `while` loops](worksheets/2_week-2-worksheet-while-loops.ipynb)\n\n## \n\n* [Week 2 lab: G. Wiz and the Catnap Caper](lab/week-2-lab.md)\n\n# More Python basics\n\n## More Python basics\n\nWe're 100% experts about syntax, right?\n\nWell, not quite yet. There are still a few constructs we haven't seen. Storing items in variables and manipulating memory is fun for a while, but eventually even that strong magic wears off. One question you've probably had at least some awareness of in the dark corner of the night is \"what exactly do we do with this stuff?\"\n\nThis week, we're going to learn _some_ of the things you can do. This is the equivalent of learning a bit about how a car works, then driving one for the first time. There are some rules of the road.\n\n## More on syntax\n\nOur first worksheet invites us to learn about `booleans` (no ghosts here, I promise). This data type allows us to judge the relative \"truthiness\" of an expression in order to understand its relationship to other values or variables. The `boolean` enables us to do many things, including use the other two constructs we learn about in this week's assignments.\n\n* [Week 02, Worksheet 0: Data Types (boolean)](worksheets/0_week-2-worksheet-data-types-booleans.ipynb)\n\nThe `if` statement lives somewhere between philosophy, formal logic, and computer science. Giving us the ability to \"branch\" our code based on `boolean` skills, we'll use `if` statements to explore what happens when a value is `True` or `False`. In addition, we'll learn a bit about the idea of the \"flow of control.\"\n\n* [Week 02, Worksheet 1: `if` statements](worksheets/1_week-2-worksheet-if-statements.ipynb)\n\nIn certain cases, if a statement is true, we should continue doing something until either the statement become false or some other information should cause us to stop. Eventually we'll combine our `if` statement and `boolean` skills (along with a new function -- `input`) to make this all worth our `while`.\n\n* [Week 02, Worksheet2: `while` loops](worksheets/2_week-2-worksheet-while-loops.ipynb)\n\n# Lab activity: G. Wiz and the Catnap Caper\n\n* [G. Wiz and the Catnap Caper](lab/week-2-lab.md)\n\n## Wrap-up\n\n---\n\n### GatorGrader\n\nGatorGrader is an Allegheny College-developed, student-written and maintained application that grades your work for you. The long and short of it, before and when you turn in your assignments, you can know what your approximate grade will be.\n\n(It doesn't do _everything_ for us, but it gives us a good starting point for evaluating your work.)\n\nYou don't need to do anything to get it -- I will distribute all the files you need with every repository. You realize the following benefits:\n\n* Complete grading transparency\n* Grading criteria _never_ changes\n* The criteria is very specific; you will know what changes you need to make\n\nThis application runs in your terminal tab, and can grade:\n\n* The whole repository\n* Just worksheets\n* Just the lab\n\n## Checking your work\n\n---\n\nNo matter where you are in your repository, the command to start and run GatorGrader is always the same:\n\n```\ngradle grade\n```\n\nHowever, you need to be _in the right place_ to get the right result. The following table summarizes the various grading locations.\n\n| Location | Grading             |\n|----------|---------------------|\n| `worksheets/` | Worksheet requirements |\n| `lab/`        | Lab requirements |\n\n### Submitting the assignment/saving progress\n\nThe GitHub platform is a place to store your work. So, it makes some sense that should be able to _clone_ (download) from it, and push back (upload) to it. Here, we'll learn this second part.\n\n- [ ] `cd` to your `~` folder\n- [ ] Locate the `cmpsc-100-week-2-python-basics` folder and `cd` to it.\n\nOnce in this folder, we need to tell git that there have been changes.\n\n- [ ] Type `git add .` and press `Enter`\n* This tells git to look through the _entire_ folder structure for new changes and \"stage\" them\n\n- [ ] Type `git commit -m \"{Commit message}\"` to \"label\" the commit\n* This is typically something like `git commit -m \"Fixing a typo\"` -- the message in quotes should be as descriptive as possible, while still remaining somewhat short\n\n- [ ] To send all changes to the server, type `git push`\n- [ ] At the prompt, input the password associated with the `SSH Key` you created earlier in this exercise (yesterday)\n\nOnce the process finishes successfully, we're done!\n\n#### A strong warning\n\n<div class=\"alert alert-block alert-danger\">\n    <p><strong>While we may use this server to store code, <u>you</u> are responsible for using GitHub as your main backup.</strong></p>\n    <p>While I back this server up on a regular basis, I cannot guarantee that I'll have the ability to restore up-to-the-minute data for your work.</p>\n    <p>Remember: to err is human; to back up your work is divine.</p>\n</div>",
        "cmpsc-100-week-3-data-structures-Yanqiao4396": "# CMPSC 100: Spring 2021, Week 03\n\n* Distributed: 15 March 2021\n* Due: 21 March 2021\n\n## Point values\n\n---\n\n|Type         |Point value |\n|-------------|------------|\n|Worksheets   |15 pts.     |\n|Lab          |20 pts.     |\n|Participation|15 pts.     |\n|             |            |\n|Total        |50 pts.     |\n|             |5.0% of course |\n\n## Table of contents\n\nFor those who just want to get to work, consult the `Instructional Materials` section. Else, for additional summary or context, read the additional sections included.\n\n* [Accepting the assignment](#Accepting-the-assignment)\n* [Overview](#Overview)\n  * [Evaluation](#Evaluation)\n* [Instructional materials](#Instructional-materials)\n  * [Worksheets and activities](#Worksheets-and-activities)\n  * [Lab](#Lab)\n* [Wrap-up](#Wrap-up)\n  * [GatorGrader](#GatorGrader)\n  * [Submitting your work](#Submitting-your-work)\n  \n## Accepting the assignment\n\n---\n\n- [ ] Log into the `#assignments` channel in our class [Slack](https://cmpsc-100-sp-2021.slack.com)\n- [ ] Click the link provided for the lab assignment and accept it in GitHub classroom\n- [ ] Once the assignment finishes building, click the link to go to your personal repository assignment\n\n## \"Cloning\" a repository\n\n### Using the correct download link\n\n- [ ] On this repository's page, click the `Clone or download` button in the upper right hand corner\n* You may need to scroll up to see it\n- [ ] In the upper right corner of the box that appears, click `Use SSH`\n- [ ] Copy the link that appears in the textbox below the phrase \"Use a password with a protected key.\"\n\n#### Cloning\n\n* [ ] Type `ls` in your terminal window\n* You should be in your `~` directory\n- [ ] Once there, \"clone\" the repository using the link copied above\n* If I (the instructor) were to clone my own repository, I'd enter (your link will look different):\n\n```\ngit clone git@github.com:allegheny-college-cmpsc-100-spring-2021/cmpsc-100-week-3-data-structures-dluman\n```\n\n## Overview\n\n## Evaluation\n\n### Worksheets\n\n* Responses to all questions or blank cells\n\n### Lab \n\n* See individual [lab guidelines](lab/week-3-lab.md#Requirements)\n\n# Instructional materials\n\n## Worksheets and activities\n\n* [Week 3, Worksheet 0: `list`s](worksheets/0_week-3-worksheet-lists.ipynb)\n* [Week 3, Worksheet 1: `slice`, `tuple`](worksheets/1_week-3-worksheet-slices-tuples.ipynb)\n* [Week 3, Worksheet 3: `for` loops](worksheets/2_week-3-worksheet-for-loops.ipynb)\n\n## Lab\n\n* [Week 2 lab: G. Wiz and the Mega Move](lab/week-3-lab.md)\n\n## Wrap-up\n\n---\n\n### GatorGrader\n\nGatorGrader is an Allegheny College-developed, student-written and maintained application that grades your work for you. The long and short of it, before and when you turn in your assignments, you can know what your approximate grade will be.\n\n(It doesn't do _everything_ for us, but it gives us a good starting point for evaluating your work.)\n\nYou don't need to do anything to get it -- I will distribute all the files you need with every repository. You realize the following benefits:\n\n* Complete grading transparency\n* Grading criteria _never_ changes\n* The criteria is very specific; you will know what changes you need to make\n\nThis application runs in your terminal tab, and can grade:\n\n* The whole repository\n* Just worksheets\n* Just the lab\n\n## Checking your work\n\n---\n\nNo matter where you are in your repository, the command to start and run GatorGrader is always the same:\n\n```\ngradle grade\n```\n\nHowever, you need to be _in the right place_ to get the right result. The following table summarizes the various grading locations.\n\n| Location | Grading             |\n|----------|---------------------|\n| `worksheets/` | Worksheet requirements |\n| `lab/`        | Lab requirements |\n\n### Submitting the assignment/saving progress\n\nThe GitHub platform is a place to store your work. So, it makes some sense that should be able to _clone_ (download) from it, and push back (upload) to it. Here, we'll learn this second part.\n\n- [ ] `cd` to your `~` folder\n- [ ] Locate the `cmpsc-100-week-3-data-structures` folder and `cd` to it.\n\nOnce in this folder, we need to tell git that there have been changes.\n\n- [ ] Type `git add .` and press `Enter`\n* This tells git to look through the _entire_ folder structure for new changes and \"stage\" them\n\n- [ ] Type `git commit -m \"{Commit message}\"` to \"label\" the commit\n* This is typically something like `git commit -m \"Fixing a typo\"` -- the message in quotes should be as descriptive as possible, while still remaining somewhat short\n\n- [ ] To send all changes to the server, type `git push`\n- [ ] At the prompt, input the password associated with the `SSH Key` you created earlier in this exercise (yesterday)\n\nOnce the process finishes successfully, we're done!\n\n#### A strong warning\n\n<div class=\"alert alert-block alert-danger\">\n    <p><strong>While we may use this server to store code, <u>you</u> are responsible for using GitHub as your main backup.</strong></p>\n    <p>While I back this server up on a regular basis, I cannot guarantee that I'll have the ability to restore up-to-the-minute data for your work.</p>\n    <p>Remember: to err is human; to back up your work is divine.</p>\n</div>",
        "cmpsc-100-week-4-more-data-structures-Yanqiao4396": "# CMPSC 100: Spring 2021, Week 04\n\n* Distributed: 22 March 2021\n* Due: 28 March 2021\n\n## Point values\n\n---\n\n|Type         |Point value |\n|-------------|------------|\n|Worksheets   |15 pts.     |\n|Lab          |20 pts.     |\n|Participation|15 pts.     |\n|             |            |\n|Total        |50 pts.     |\n|             |5.0% of course |\n\n## Table of contents\n\nFor those who just want to get to work, consult the `Instructional Materials` section. Else, for additional summary or context, read the additional sections included.\n\n* [Accepting the assignment](#Accepting-the-assignment)\n* [Overview](#Overview)\n  * [Evaluation](#Evaluation)\n* [Instructional materials](#Instructional-materials)\n  * [Worksheets and activities](#Worksheets-and-activities)\n  * [Lab](#Lab)\n* [Wrap-up](#Wrap-up)\n  * [GatorGrader](#GatorGrader)\n  * [Submitting your work](#Submitting-your-work)\n  \n## Accepting the assignment\n\n---\n\n- [ ] Log into the `#assignments` channel in our class [Slack](https://cmpsc-100-sp-2021.slack.com)\n- [ ] Click the link provided for the lab assignment and accept it in GitHub classroom\n- [ ] Once the assignment finishes building, click the link to go to your personal repository assignment\n\n## \"Cloning\" a repository\n\n### Using the correct download link\n\n- [ ] On this repository's page, click the `Clone or download` button in the upper right hand corner\n* You may need to scroll up to see it\n- [ ] In the upper right corner of the box that appears, click `Use SSH`\n- [ ] Copy the link that appears in the textbox below the phrase \"Use a password with a protected key.\"\n\n#### Cloning\n\n* [ ] Type `ls` in your terminal window\n* You should be in your `~` directory\n- [ ] Once there, \"clone\" the repository using the link copied above\n* If I (the instructor) were to clone my own repository, I'd enter (your link will look different):\n\n```\ngit clone git@github.com:allegheny-college-cmpsc-100-spring-2021/cmpsc-100-week-4-more-data-structures-dluman\n```\n\n## Overview\n\n## Evaluation\n\n### Worksheets\n\n* Responses to all questions or blank cells\n\n### Lab \n\n* See individual [lab guidelines](lab/week-3-lab.md#Requirements)\n\n# Instructional materials\n\n## Worksheets and activities\n\n* [Week 3, Worksheet 0: `list`s](worksheets/0_week-4-worksheet-dictionaries.ipynb)\n* [Week 3, Worksheet 1: `slice`, `tuple`](worksheets/1_week-4-worksheet-strings.ipynb)\n* [Week 3, Worksheet 3: `for` loops](worksheets/2_week-4-worksheet-io.ipynb)\n\n## Lab\n\n* [Week 4 lab: G. Wiz and the Ballot Bonanza](lab/week-4-lab.md)\n\n## Wrap-up\n\n---\n\n### GatorGrader\n\nGatorGrader is an Allegheny College-developed, student-written and maintained application that grades your work for you. The long and short of it, before and when you turn in your assignments, you can know what your approximate grade will be.\n\n(It doesn't do _everything_ for us, but it gives us a good starting point for evaluating your work.)\n\nYou don't need to do anything to get it -- I will distribute all the files you need with every repository. You realize the following benefits:\n\n* Complete grading transparency\n* Grading criteria _never_ changes\n* The criteria is very specific; you will know what changes you need to make\n\nThis application runs in your terminal tab, and can grade:\n\n* The whole repository\n* Just worksheets\n* Just the lab\n\n## Checking your work\n\n---\n\nNo matter where you are in your repository, the command to start and run GatorGrader is always the same:\n\n```\ngradle grade\n```\n\nHowever, you need to be _in the right place_ to get the right result. The following table summarizes the various grading locations.\n\n| Location | Grading             |\n|----------|---------------------|\n| `worksheets/` | Worksheet requirements |\n| `lab/`        | Lab requirements |\n\n### Submitting the assignment/saving progress\n\nThe GitHub platform is a place to store your work. So, it makes some sense that should be able to _clone_ (download) from it, and push back (upload) to it. Here, we'll learn this second part.\n\n- [ ] `cd` to your `~` folder\n- [ ] Locate the `cmpsc-100-week-4-more-data-structures` folder and `cd` to it.\n\nOnce in this folder, we need to tell git that there have been changes.\n\n- [ ] Type `git add .` and press `Enter`\n* This tells git to look through the _entire_ folder structure for new changes and \"stage\" them\n\n- [ ] Type `git commit -m \"{Commit message}\"` to \"label\" the commit\n* This is typically something like `git commit -m \"Fixing a typo\"` -- the message in quotes should be as descriptive as possible, while still remaining somewhat short\n\n- [ ] To send all changes to the server, type `git push`\n- [ ] At the prompt, input the password associated with the `SSH Key` you created earlier in this exercise (yesterday)\n\nOnce the process finishes successfully, we're done!\n\n#### A strong warning\n\n<div class=\"alert alert-block alert-danger\">\n    <p><strong>While we may use this server to store code, <u>you</u> are responsible for using GitHub as your main backup.</strong></p>\n    <p>While I back this server up on a regular basis, I cannot guarantee that I'll have the ability to restore up-to-the-minute data for your work.</p>\n    <p>Remember: to err is human; to back up your work is divine.</p>\n</div>",
        "cmpsc-100-week-5-functions-Yanqiao4396": "# CMPSC 100: Spring 2021, Week 05\n\n* Distributed: 29 March 2021\n* Due: 5 April 2021\n\n## Point values\n\n---\n\n|Type         |Point value |\n|-------------|------------|\n|Worksheets   |20 pts.     |\n|Lab          |30 pts.     |\n|Participation|15 pts.     |\n|             |            |\n|Total        |65 pts.     |\n|             |6.5% of course |\n\n## Table of contents\n\nFor those who just want to get to work, consult the `Instructional Materials` section. Else, for additional summary or context, read the additional sections included.\n\n* [Accepting the assignment](#Accepting-the-assignment)\n* [Overview](#Overview)\n  * [Evaluation](#Evaluation)\n* [Instructional materials](#Instructional-materials)\n  * [Worksheets and activities](#Worksheets-and-activities)\n  * [Lab](#Lab)\n* [Wrap-up](#Wrap-up)\n  * [GatorGrader](#GatorGrader)\n  * [Submitting your work](#Submitting-your-work)\n  \n## Accepting the assignment\n\n---\n\n- [ ] Log into the `#assignments` channel in our class [Slack](https://cmpsc-100-sp-2021.slack.com)\n- [ ] Click the link provided for the lab assignment and accept it in GitHub classroom\n- [ ] Once the assignment finishes building, click the link to go to your personal repository assignment\n\n## \"Cloning\" a repository\n\n### Using the correct download link\n\n- [ ] On this repository's page, click the `Clone or download` button in the upper right hand corner\n* You may need to scroll up to see it\n- [ ] In the upper right corner of the box that appears, click `Use SSH`\n- [ ] Copy the link that appears in the textbox below the phrase \"Use a password with a protected key.\"\n\n#### Cloning\n\n* [ ] Type `ls` in your terminal window\n* You should be in your `~` directory\n- [ ] Once there, \"clone\" the repository using the link copied above\n* If I (the instructor) were to clone my own repository, I'd enter (your link will look different):\n\n```\ngit clone git@github.com:allegheny-college-cmpsc-100-spring-2021/cmpsc-100-week-5-functions-dluman\n```\n\n## Overview\n\n## Evaluation\n\n### Worksheets\n\n* Responses to all questions or blank cells\n\n### Lab \n\n* See individual [lab guidelines](lab/week-3-lab.md#Requirements)\n\n# Instructional materials\n\n## Worksheets and activities\n\n* [Week 5, Worksheet 0: `functions`s](worksheets/0_week-5-worksheet-functions.ipynb)\n* [Week 5, Worksheet 1: Function Junction](worksheets/1_week-5-worksheet-function-junction.md)\n## Lab\n\n* [Week 5 lab: Spies Like Us](lab/week-5-lab.md)\n\n## Wrap-up\n\n---\n\n### GatorGrader\n\nGatorGrader is an Allegheny College-developed, student-written and maintained application that grades your work for you. The long and short of it, before and when you turn in your assignments, you can know what your approximate grade will be.\n\n(It doesn't do _everything_ for us, but it gives us a good starting point for evaluating your work.)\n\nYou don't need to do anything to get it -- I will distribute all the files you need with every repository. You realize the following benefits:\n\n* Complete grading transparency\n* Grading criteria _never_ changes\n* The criteria is very specific; you will know what changes you need to make\n\nThis application runs in your terminal tab, and can grade:\n\n* The whole repository\n* Just worksheets\n* Just the lab\n\n## Checking your work\n\n---\n\nNo matter where you are in your repository, the command to start and run GatorGrader is always the same:\n\n```\ngradle grade\n```\n\nHowever, you need to be _in the right place_ to get the right result. The following table summarizes the various grading locations.\n\n| Location | Grading             |\n|----------|---------------------|\n| `worksheets/` | Worksheet requirements |\n| `lab/`        | Lab requirements |\n\n### Submitting the assignment/saving progress\n\nThe GitHub platform is a place to store your work. So, it makes some sense that should be able to _clone_ (download) from it, and push back (upload) to it. Here, we'll learn this second part.\n\n- [ ] `cd` to your `~` folder\n- [ ] Locate the `cmpsc-100-week-5-functions` folder and `cd` to it.\n\nOnce in this folder, we need to tell git that there have been changes.\n\n- [ ] Type `git add .` and press `Enter`\n* This tells git to look through the _entire_ folder structure for new changes and \"stage\" them\n\n- [ ] Type `git commit -m \"{Commit message}\"` to \"label\" the commit\n* This is typically something like `git commit -m \"Fixing a typo\"` -- the message in quotes should be as descriptive as possible, while still remaining somewhat short\n\n- [ ] To send all changes to the server, type `git push`\n- [ ] At the prompt, input the password associated with the `SSH Key` you created earlier in this exercise (yesterday)\n\nOnce the process finishes successfully, we're done!\n\n#### A strong warning\n\n<div class=\"alert alert-block alert-danger\">\n    <p><strong>While we may use this server to store code, <u>you</u> are responsible for using GitHub as your main backup.</strong></p>\n    <p>While I back this server up on a regular basis, I cannot guarantee that I'll have the ability to restore up-to-the-minute data for your work.</p>\n    <p>Remember: to err is human; to back up your work is divine.</p>\n</div>",
        "cmpsc-100-week-6-modules-Yanqiao4396": "# CMPSC 100: Spring 2021, Week 06\n\n* Distributed: 5 April 2021\n* Due: 11 April 2021\n\n## Point values\n\n---\n\n|Type         |Point value |\n|-------------|------------|\n|Worksheets   |20 pts.     |\n|Lab          |40 pts.     |\n|Participation|15 pts.     |\n|             |            |\n|Total        |75 pts.     |\n|             |7.5% of course |\n\n## Table of contents\n\nFor those who just want to get to work, consult the `Instructional Materials` section. Else, for additional summary or context, read the additional sections included.\n\n* [Accepting the assignment](#Accepting-the-assignment)\n* [Overview](#Overview)\n  * [Evaluation](#Evaluation)\n* [Instructional materials](#Instructional-materials)\n  * [Worksheets and activities](#Worksheets-and-activities)\n  * [Lab](#Lab)\n* [Wrap-up](#Wrap-up)\n  * [GatorGrader](#GatorGrader)\n  * [Submitting your work](#Submitting-your-work)\n  \n## Accepting the assignment\n\n---\n\n- [ ] Log into the `#assignments` channel in our class [Slack](https://cmpsc-100-sp-2021.slack.com)\n- [ ] Click the link provided for the lab assignment and accept it in GitHub classroom\n- [ ] Once the assignment finishes building, click the link to go to your personal repository assignment\n\n## \"Cloning\" a repository\n\n### Using the correct download link\n\n- [ ] On this repository's page, click the `Clone or download` button in the upper right hand corner\n* You may need to scroll up to see it\n- [ ] In the upper right corner of the box that appears, click `Use SSH`\n- [ ] Copy the link that appears in the textbox below the phrase \"Use a password with a protected key.\"\n\n#### Cloning\n\n* [ ] Type `ls` in your terminal window\n* You should be in your `~` directory\n- [ ] Once there, \"clone\" the repository using the link copied above\n* If I (the instructor) were to clone my own repository, I'd enter (your link will look different):\n\n```\ngit clone git@github.com:allegheny-college-cmpsc-100-spring-2021/cmpsc-100-week-6-modules-dluman\n```\n\n## Overview\n\n## Evaluation\n\n### Worksheets\n\n* Responses to all questions or blank cells\n\n### Lab \n\n* See individual [lab guidelines](lab/week-3-lab.md#Requirements)\n\n# Instructional materials\n\n## Worksheets and activities\n\n* [Week 6, Worksheet 0: `modules` (`random`)](worksheets/0_week-6-worksheet-modules.ipynb)\n* [Week 6, Worksheet 1: `modules` (`json`)](worksheets/1_week-6-worksheet-modules.ipynb)\n* [Week 6, Worksheet 2: Monster Mash](worksheets/2_week-6-worksheet-monster-mash.md)\n## Lab\n\n* [Week 6 lab: HumanQuest](lab/week-6-lab.md)\n\n## Wrap-up\n\n---\n\n### GatorGrader\n\nGatorGrader is an Allegheny College-developed, student-written and maintained application that grades your work for you. The long and short of it, before and when you turn in your assignments, you can know what your approximate grade will be.\n\n(It doesn't do _everything_ for us, but it gives us a good starting point for evaluating your work.)\n\nYou don't need to do anything to get it -- I will distribute all the files you need with every repository. You realize the following benefits:\n\n* Complete grading transparency\n* Grading criteria _never_ changes\n* The criteria is very specific; you will know what changes you need to make\n\nThis application runs in your terminal tab, and can grade:\n\n* The whole repository\n* Just worksheets\n* Just the lab\n\n## Checking your work\n\n---\n\nNo matter where you are in your repository, the command to start and run GatorGrader is always the same:\n\n```\ngradle grade\n```\n\nHowever, you need to be _in the right place_ to get the right result. The following table summarizes the various grading locations.\n\n| Location | Grading             |\n|----------|---------------------|\n| `worksheets/` | Worksheet requirements |\n| `lab/`        | Lab requirements |\n\n### Submitting the assignment/saving progress\n\nThe GitHub platform is a place to store your work. So, it makes some sense that should be able to _clone_ (download) from it, and push back (upload) to it. Here, we'll learn this second part.\n\n- [ ] `cd` to your `~` folder\n- [ ] Locate the `cmpsc-100-week-6-modules` folder and `cd` to it.\n\nOnce in this folder, we need to tell git that there have been changes.\n\n- [ ] Type `git add .` and press `Enter`\n* This tells git to look through the _entire_ folder structure for new changes and \"stage\" them\n\n- [ ] Type `git commit -m \"{Commit message}\"` to \"label\" the commit\n* This is typically something like `git commit -m \"Fixing a typo\"` -- the message in quotes should be as descriptive as possible, while still remaining somewhat short\n\n- [ ] To send all changes to the server, type `git push`\n- [ ] At the prompt, input the password associated with the `SSH Key` you created earlier in this exercise (yesterday)\n\nOnce the process finishes successfully, we're done!\n\n#### A strong warning\n\n<div class=\"alert alert-block alert-danger\">\n    <p><strong>While we may use this server to store code, <u>you</u> are responsible for using GitHub as your main backup.</strong></p>\n    <p>While I back this server up on a regular basis, I cannot guarantee that I'll have the ability to restore up-to-the-minute data for your work.</p>\n    <p>Remember: to err is human; to back up your work is divine.</p>\n</div>",
        "cmpsc-100-week-7-more-modules-Yanqiao4396": "# CMPSC 100: Spring 2021, Week 07\n\n* Distributed: 12 April 2021\n* Due: 18 April 2021\n\n## Point values\n\n---\n\n|Type         |Point value |\n|-------------|------------|\n|Worksheets   |40 pts.     |\n|Participation|15 pts.     |\n|             |            |\n|Total        |55 pts.     |\n|             |5.5% of course|\n|Lab (Optional)|40 pts.     |\n\n## Table of contents\n\nFor those who just want to get to work, consult the `Instructional Materials` section. Else, for additional summary or context, read the additional sections included.\n\n* [Accepting the assignment](#Accepting-the-assignment)\n* [Overview](#Overview)\n  * [Evaluation](#Evaluation)\n* [Instructional materials](#Instructional-materials)\n  * [Worksheets and activities](#Worksheets-and-activities)\n  * [Lab](#Lab)\n* [Wrap-up](#Wrap-up)\n  * [GatorGrader](#GatorGrader)\n  * [Submitting your work](#Submitting-your-work)\n  \n## Accepting the assignment\n\n---\n\n- [ ] Log into the `#assignments` channel in our class [Slack](https://cmpsc-100-sp-2021.slack.com)\n- [ ] Click the link provided for the lab assignment and accept it in GitHub classroom\n- [ ] Once the assignment finishes building, click the link to go to your personal repository assignment\n\n## \"Cloning\" a repository\n\n### Using the correct download link\n\n- [ ] On this repository's page, click the `Clone or download` button in the upper right hand corner\n* You may need to scroll up to see it\n- [ ] In the upper right corner of the box that appears, click `Use SSH`\n- [ ] Copy the link that appears in the textbox below the phrase \"Use a password with a protected key.\"\n\n#### Cloning\n\n* [ ] Type `ls` in your terminal window\n* You should be in your `~` directory\n- [ ] Once there, \"clone\" the repository using the link copied above\n* If I (the instructor) were to clone my own repository, I'd enter (your link will look different):\n\n```\ngit clone git@github.com:allegheny-college-cmpsc-100-spring-2021/cmpsc-100-week-6-modules-dluman\n```\n\n## Overview\n\n## Evaluation\n\n### Worksheets\n\n* Responses to all questions or blank cells\n\n### Lab \n\n* See individual [lab guidelines](lab/week-7-lab.md#Requirements)\n\n# Instructional materials\n\n## Worksheets and activities\n\n* [Week 7, Worksheet 0: Object-oriented programming](worksheets/0_week-7-worksheet-oop.ipynb)\n* [Week 7, Worksheet 1: Object-oriented programming](worksheets/1_week-7-worksheet-oop.md)\n* [Week 6, Worksheet 2: Ask Again](worksheets/2_week-7-worksheet-ask-again.md)\n## Lab\n\n* [Week 6 lab: One Last Job...](lab/week-7-lab.md)\n\n## Wrap-up\n\n---\n\n### GatorGrader\n\nGatorGrader is an Allegheny College-developed, student-written and maintained application that grades your work for you. The long and short of it, before and when you turn in your assignments, you can know what your approximate grade will be.\n\n(It doesn't do _everything_ for us, but it gives us a good starting point for evaluating your work.)\n\nYou don't need to do anything to get it -- I will distribute all the files you need with every repository. You realize the following benefits:\n\n* Complete grading transparency\n* Grading criteria _never_ changes\n* The criteria is very specific; you will know what changes you need to make\n\nThis application runs in your terminal tab, and can grade:\n\n* The whole repository\n* Just worksheets\n* Just the lab\n\n## Checking your work\n\n---\n\nNo matter where you are in your repository, the command to start and run GatorGrader is always the same:\n\n```\ngradle grade\n```\n\nHowever, you need to be _in the right place_ to get the right result. The following table summarizes the various grading locations.\n\n| Location | Grading             |\n|----------|---------------------|\n| `worksheets/` | Worksheet requirements |\n| `lab/`        | Lab requirements |\n\n### Submitting the assignment/saving progress\n\nThe GitHub platform is a place to store your work. So, it makes some sense that should be able to _clone_ (download) from it, and push back (upload) to it. Here, we'll learn this second part.\n\n- [ ] `cd` to your `~` folder\n- [ ] Locate the `cmpsc-100-week-6-modules` folder and `cd` to it.\n\nOnce in this folder, we need to tell git that there have been changes.\n\n- [ ] Type `git add .` and press `Enter`\n* This tells git to look through the _entire_ folder structure for new changes and \"stage\" them\n\n- [ ] Type `git commit -m \"{Commit message}\"` to \"label\" the commit\n* This is typically something like `git commit -m \"Fixing a typo\"` -- the message in quotes should be as descriptive as possible, while still remaining somewhat short\n\n- [ ] To send all changes to the server, type `git push`\n- [ ] At the prompt, input the password associated with the `SSH Key` you created earlier in this exercise (yesterday)\n\nOnce the process finishes successfully, we're done!\n\n#### A strong warning\n\n<div class=\"alert alert-block alert-danger\">\n    <p><strong>While we may use this server to store code, <u>you</u> are responsible for using GitHub as your main backup.</strong></p>\n    <p>While I back this server up on a regular basis, I cannot guarantee that I'll have the ability to restore up-to-the-minute data for your work.</p>\n    <p>Remember: to err is human; to back up your work is divine.</p>\n</div>",
        "cmpsc-100-week-8-images-Yanqiao4396": "# CMPSC 100: Spring 2021, Week 08\n\n* Distributed: 19 April 2021\n* Due: 25 April 2021\n\n## Point values\n\n---\n\n|Type         |Point value |\n|-------------|------------|\n|Worksheets   |35 pts.     |\n|Lab          |60 pts.     |\n|Participation|15 pts.     |\n|             |            |\n|Total        |110 pts.     |\n|             |11.0% of course|\n\n## Table of contents\n\nFor those who just want to get to work, consult the `Instructional Materials` section. Else, for additional summary or context, read the additional sections included.\n\n* [Accepting the assignment](#Accepting-the-assignment)\n* [Overview](#Overview)\n  * [Evaluation](#Evaluation)\n* [Instructional materials](#Instructional-materials)\n  * [Worksheets and activities](#Worksheets-and-activities)\n  * [Lab](#Lab)\n* [Wrap-up](#Wrap-up)\n  * [GatorGrader](#GatorGrader)\n  * [Submitting your work](#Submitting-your-work)\n  \n## Accepting the assignment\n\n---\n\n- [ ] Log into the `#assignments` channel in our class [Slack](https://cmpsc-100-sp-2021.slack.com)\n- [ ] Click the link provided for the lab assignment and accept it in GitHub classroom\n- [ ] Once the assignment finishes building, click the link to go to your personal repository assignment\n\n## \"Cloning\" a repository\n\n### Using the correct download link\n\n- [ ] On this repository's page, click the `Clone or download` button in the upper right hand corner\n* You may need to scroll up to see it\n- [ ] In the upper right corner of the box that appears, click `Use SSH`\n- [ ] Copy the link that appears in the textbox below the phrase \"Use a password with a protected key.\"\n\n#### Cloning\n\n* [ ] Type `ls` in your terminal window\n* You should be in your `~` directory\n- [ ] Once there, \"clone\" the repository using the link copied above\n* If I (the instructor) were to clone my own repository, I'd enter (your link will look different):\n\n```\ngit clone git@github.com:allegheny-college-cmpsc-100-spring-2021/cmpsc-100-week-8-images-dluman\n```\n\n## Overview\n\n## Evaluation\n\n### Worksheets\n\n* Responses to all questions or blank cells\n\n### Lab \n\n* See individual [lab guidelines](lab/week-8-lab.md#Requirements)\n\n# Instructional materials\n\n## Worksheets and activities\n\n* [Week 8, Worksheet 0: Object-oriented programming](worksheets/0_week-8-worksheet-PIL.ipynb)\n* [Week 8, Worksheet 1: Object-oriented programming](worksheets/1_week-8-worksheet-PIL.ipynb)\n\n## Lab\n\n* [Week 8 lab: The Dealership](lab/week-8-lab.md)\n\n## Wrap-up\n\n---\n\n### GatorGrader\n\nGatorGrader is an Allegheny College-developed, student-written and maintained application that grades your work for you. The long and short of it, before and when you turn in your assignments, you can know what your approximate grade will be.\n\n(It doesn't do _everything_ for us, but it gives us a good starting point for evaluating your work.)\n\nYou don't need to do anything to get it -- I will distribute all the files you need with every repository. You realize the following benefits:\n\n* Complete grading transparency\n* Grading criteria _never_ changes\n* The criteria is very specific; you will know what changes you need to make\n\nThis application runs in your terminal tab, and can grade:\n\n* The whole repository\n* Just worksheets\n* Just the lab\n\n## Checking your work\n\n---\n\nNo matter where you are in your repository, the command to start and run GatorGrader is always the same:\n\n```\ngradle grade\n```\n\nHowever, you need to be _in the right place_ to get the right result. The following table summarizes the various grading locations.\n\n| Location | Grading             |\n|----------|---------------------|\n| `worksheets/` | Worksheet requirements |\n| `lab/`        | Lab requirements |\n\n### Submitting the assignment/saving progress\n\nThe GitHub platform is a place to store your work. So, it makes some sense that should be able to _clone_ (download) from it, and push back (upload) to it. Here, we'll learn this second part.\n\n- [ ] `cd` to your `~` folder\n- [ ] Locate the `cmpsc-100-week-8-images` folder and `cd` to it.\n\nOnce in this folder, we need to tell git that there have been changes.\n\n- [ ] Type `git add .` and press `Enter`\n* This tells git to look through the _entire_ folder structure for new changes and \"stage\" them\n\n- [ ] Type `git commit -m \"{Commit message}\"` to \"label\" the commit\n* This is typically something like `git commit -m \"Fixing a typo\"` -- the message in quotes should be as descriptive as possible, while still remaining somewhat short\n\n- [ ] To send all changes to the server, type `git push`\n- [ ] At the prompt, input the password associated with the `SSH Key` you created earlier in this exercise (yesterday)\n\nOnce the process finishes successfully, we're done!\n\n#### A strong warning\n\n<div class=\"alert alert-block alert-danger\">\n    <p><strong>While we may use this server to store code, <u>you</u> are responsible for using GitHub as your main backup.</strong></p>\n    <p>While I back this server up on a regular basis, I cannot guarantee that I'll have the ability to restore up-to-the-minute data for your work.</p>\n    <p>Remember: to err is human; to back up your work is divine.</p>\n</div>\n",
        "cmpsc-100-week-9-text-generation-Yanqiao4396": "# CMPSC 100: Spring 2021, Week 9\n\n* Distributed: 26 April 2021\n* Due: 2 May 2021\n\n## Point values\n\n---\n\n|Type         |Point value |\n|-------------|------------|\n|Worksheets   |35 pts.     |\n|Lab          |60 pts.     |\n|Participation|15 pts.     |\n|             |            |\n|Total        |110 pts.     |\n|             |11.0% of course|\n\n## Table of contents\n\nFor those who just want to get to work, consult the `Instructional Materials` section. Else, for additional summary or context, read the additional sections included.\n\n* [Accepting the assignment](#Accepting-the-assignment)\n* [Overview](#Overview)\n  * [Evaluation](#Evaluation)\n* [Instructional materials](#Instructional-materials)\n  * [Worksheets and activities](#Worksheets-and-activities)\n  * [Lab](#Lab)\n* [Wrap-up](#Wrap-up)\n  * [GatorGrader](#GatorGrader)\n  * [Submitting your work](#Submitting-your-work)\n  \n## Accepting the assignment\n\n---\n\n- [ ] Log into the `#assignments` channel in our class [Slack](https://cmpsc-100-sp-2021.slack.com)\n- [ ] Click the link provided for the lab assignment and accept it in GitHub classroom\n- [ ] Once the assignment finishes building, click the link to go to your personal repository assignment\n\n## \"Cloning\" a repository\n\n### Using the correct download link\n\n- [ ] On this repository's page, click the `Clone or download` button in the upper right hand corner\n* You may need to scroll up to see it\n- [ ] In the upper right corner of the box that appears, click `Use SSH`\n- [ ] Copy the link that appears in the textbox below the phrase \"Use a password with a protected key.\"\n\n#### Cloning\n\n* [ ] Type `ls` in your terminal window\n* You should be in your `~` directory\n- [ ] Once there, \"clone\" the repository using the link copied above\n* If I (the instructor) were to clone my own repository, I'd enter (your link will look different):\n\n```\ngit clone git@github.com:allegheny-college-cmpsc-100-spring-2021/cmpsc-100-week-9-text-generation-dluman\n```\n\n## Overview\n\n## Evaluation\n\n### Worksheets\n\n* Responses to all questions or blank cells\n\n### Lab \n\n* See individual [lab guidelines](lab/week-8-lab.md#Requirements)\n\n# Instructional materials\n\n## Worksheets and activities\n\n* [Week 9, Worksheet 0: Text generation](worksheets/0_week-9-text-generation.ipynb)\n* [Week 8, Worksheet 1: Sonnets](worksheets/1_week-9-worksheet-sonnets.md)\n\n## Lab\n\n* [Week 9 lab: Evaluating computational projects](lab/week-9-lab.md)\n\n## Wrap-up\n\n---\n\n### GatorGrader\n\nGatorGrader is an Allegheny College-developed, student-written and maintained application that grades your work for you. The long and short of it, before and when you turn in your assignments, you can know what your approximate grade will be.\n\n(It doesn't do _everything_ for us, but it gives us a good starting point for evaluating your work.)\n\nYou don't need to do anything to get it -- I will distribute all the files you need with every repository. You realize the following benefits:\n\n* Complete grading transparency\n* Grading criteria _never_ changes\n* The criteria is very specific; you will know what changes you need to make\n\nThis application runs in your terminal tab, and can grade:\n\n* The whole repository\n* Just worksheets\n* Just the lab\n\n## Checking your work\n\n---\n\nNo matter where you are in your repository, the command to start and run GatorGrader is always the same:\n\n```\ngradle grade\n```\n\nHowever, you need to be _in the right place_ to get the right result. The following table summarizes the various grading locations.\n\n| Location | Grading             |\n|----------|---------------------|\n| `worksheets/` | Worksheet requirements |\n| `lab/`        | Lab requirements |\n\n### Submitting the assignment/saving progress\n\nThe GitHub platform is a place to store your work. So, it makes some sense that should be able to _clone_ (download) from it, and push back (upload) to it. Here, we'll learn this second part.\n\n- [ ] `cd` to your `~` folder\n- [ ] Locate the `cmpsc-100-week-9-text-generation` folder and `cd` to it.\n\nOnce in this folder, we need to tell git that there have been changes.\n\n- [ ] Type `git add .` and press `Enter`\n* This tells git to look through the _entire_ folder structure for new changes and \"stage\" them\n\n- [ ] Type `git commit -m \"{Commit message}\"` to \"label\" the commit\n* This is typically something like `git commit -m \"Fixing a typo\"` -- the message in quotes should be as descriptive as possible, while still remaining somewhat short\n\n- [ ] To send all changes to the server, type `git push`\n- [ ] At the prompt, input the password associated with the `SSH Key` you created earlier in this exercise (yesterday)\n\nOnce the process finishes successfully, we're done!\n\n#### A strong warning\n\n<div class=\"alert alert-block alert-danger\">\n    <p><strong>While we may use this server to store code, <u>you</u> are responsible for using GitHub as your main backup.</strong></p>\n    <p>While I back this server up on a regular basis, I cannot guarantee that I'll have the ability to restore up-to-the-minute data for your work.</p>\n    <p>Remember: to err is human; to back up your work is divine.</p>\n</div>\n",
        "cmpsc-100-course-project-Yanqiao4396": "# Course Project\n\n\n\n## Table of Contents\n\n- [Course Project](#course-project)\n  - [Table of Contents](#table-of-contents)\n  - [Overview](#overview)\n  - [Output](#output)\n  - [Ideas within codes](#ideas-within-codes)\n\n\n\n## Overview\nThis is my final project in the CMPSC 100 class. The purpose of this project is to simulate a battle in Pokemon. First, we randomly choose 2 Pokemons out of a dictionary and then let them fighting with each other authomatically. In the battle process, monsters can attack, and when the health point is not so high, monster has possibility to try to heal itself or even escape from this battle. Furthermore, user's monster might try to catch the adversary monster when that monster has low health point.\n## Output\n\nBased on the fact that is just my first project in my first Computer Science class, the functions are simple. By running without any extract commands, you can get the outputs like below\n\n1. Charmander attacks Bulbasaur with 16 hp  \nBulbasaur attacks Charmander with 31 hp  \nCharmander attacks Bulbasaur with 19 hp  \nBulbasaur attacks Charmander with 18 hp  \nCharmander attacks Bulbasaur with 17 hp  \nBulbasaur attacks Charmander with 30 hp  \nCharmander attacks Bulbasaur with 15 hp  \nBulbasaur attacks Charmander with 23 hp  \nCharmander heals itself.  \nBulbasaur attacks Charmander with 27 hp  \nCharmander tries to capture Bulbasaur..... it succeeds. The battle ends  \nCharmander wins!  \n\n\n2. Charmander attacks Squirtle with 23 hp  \nSquirtle attacks Charmander with 18 hp \nCharmander attacks Squirtle with 18 hp  \nSquirtle attacks Charmander with 28 hp  \nCharmander attacks Squirtle with 21 hp  \nSquirtle attacks Charmander with 17 hp  \nCharmander attacks Squirtle with 15 hp  \nSquirtle attacks Charmander with 28 hp  \nCharmander heals itself.  \nSquirtle attacks Charmander with 28 hp  \nCharmander tries to capture Squirtle, but it fails  \nSquirtle attacks Charmander with 27 hp  \nCharmander tries to escape but it fails  \nSquirtle attacks Charmander with 20 hp  \nCharmander attacks Squirtle with 18 hp   \nCharmander has healed once, so intead it attacks this time   \nSquirtle attacks Charmander with 20 hp  \nSquirtle wins!  \n\n\n\n\n\n## Ideas within codes\n\nThe fundamentaional mechanism in this project is random. All the processes are randomly and automatically pushed without any human-made input. For this reason, random method counts a lot in my project. For example, the attack demage is totally a random value in a restrained realm. Except that, anohter crucial element in my project is if statement. To make monsters' battle more impressive, They should have mulitple moves. If statement, therefore, are able to achieve this idea and are also the most difficult part in my project. As a smart and ideal Pokemon monster, it should do its choice by considering both its own and enemy's hleath points. For that, when one monster has low health point, Both sides may do special moves like healing, capturing and escaping.\n\n\n\n\n"
    },
    "CMPSC 302: Web Development, Allegheny College, Spring 2022": {
        "cmpsc-302-week-0-setup-Yanqiao4396": "# `CMPSC 302` Web Development, Week 0: Setup\n\n* Assigned: 25 February 2022, 1:30 PM\n* Due: 28 February 2022, 1:30 PM\n\nIn today's activity, we will cover:\n\n* Setting up a development \"environment\"\n* Learning and/or practicing \"version control\" (i.e. `git`, GitHub)\n* Interacting with \"GitHub Pages\"\n* Exploring the interaction between HTML, CSS, and Javascript\n* Writing \"Markdown\"\n\nThose of you who have taken computer science courses previously may have several of these steps already taken care of. For others, this is the first time interacting with many of these concepts. I humbly ask that those of you with more experience lend aid to others at your table who request it.\n\nAs always -- for both experienced folks and beginners -- allow some time to attempt to perform the various tasks that this assignment asks of you before inquiring about help.\n\n## Table of contents\n\n`TODO: Finish ToC`\n\n## Note on this document\n\nThis document is known as a `README`, a set of instructions that usually follow in chronological order. As its name indicates, it's meant to be required reading. This `README` follows such a chronological order. If you've never set up a development environment, or you have a new machine, you should follow along closely.\n\nFor folks who have already completed environment setup to their satisfaction, continue this assignment from the [docs/README.md](docs/README.md) file.\n\n## Setting up a development \"environment\"\n\nIn programming lingo, preparing an \"environment\" means to set up the tools you'll need to achieve a development task at-hand. Here, we're setting up two things: `git` and what's known as an \"IDE\" (Integrated Development Environment).\n\n### IDE\n\nProgrammers have very strong opinions and preferences toward IDEs. For this course, I suggest one of 2 options, each discussed below. Both platforms offer similar options and have relatively robust plugin/extension communities.\n\n**This course only requires that you install _one_ of the following, or another substitute if you are comfortable with another IDE. They're both available at no cost.**\n\n#### Atom\n\n![Atom logo](https://www.heise.de/download/media/atom-editor/atom-logo_1-1-30.png)\n\n* Recommended for: beginning developers who might only ever do web development\n\nAtom is a light-weight text editor written by the folks at GitHub. Of the two options, it requires the least commitment, though it has fewer features. One benefit featured in Atom that isn't necessarily in other IDEs: GitHub transfer integration.\n\n##### Installing Atom\n\n- [ ] Head to [Atom.io](https://www.atom.io)\n- [ ] Choose the installer for your operating system\n- [ ] Install the program; once installed, doubl-click the program icon to launch it\n- [ ] Locate the `Edit` menu and find the `Install` option\n- [ ] Search for, install `atomic-terminal`, and enable\n- [ ] Once enabled, open a terminal by finding the `Packages` menu and clicking the `Terminal` option\n- [ ] From the resulting sub-menu, click `Open New Terminal`\n  * The terminal should open at the bottom of the application window\n  * **Keep this terminal window open!**\n\n#### VS Code\n\n![VS Code logo](https://wakatime.com/static/img/editor-icons/vs-code-128.png)\n\n* [code.visualstudio.com](https://code.visualstudio.com/)\n\n* Recommended for: intermediate or advanced developers who do much more than just web development\n\nVS Code is a fully-featured editor for a wide range of projects. Used for much more than web development, the IDE is an excellent choice for students looking to continue their computer science studies.\n\n##### Installing VS Code\n\n- [ ] Visit the [Visual Studio Code](https://code.visualstudio.com/) site\n- [ ] Download the correct version for your operating system\n\n\n### `git`\n\n![git logo](https://www.ostraining.com/cdn/images/logo/git-logo.png)\n\n`git` is a program that allows user to transfer files between a storage server (for us, [GitHub](https://www.github.com)) and your computer.\n\n- [ ] Hop over to the [git downloads site](https://git-scm.com/downloads)\n- [ ] Choose the correct operating system from choices available and download that version\n- [ ] Find where you saved the version on your computer and run the installer\n- [ ] To check if your install happened correctly open the terminal in your chosen IDE\n- [ ] Type `git --version`; if you see something like `git version 2.20.1`, you can move on. If not, ask your table or call the instructor.\n- [ ] If installed correctly, type the following, replacing the appropriate values (like email and username) with your details:\n\n(After you've finished each command, press `Enter`.)\n\n`git config --global user.email \"YOUR ALLEGHENY EMAIL\"`\n\n`git config --global user.name \"YOUR GITHUB USERNAME\"`\n\n- [ ] Once you're done with these instructions, you're finished with `git` setup.\n\nBut, _keep your terminal open_ for the next step\n\n### Securing the connection\n\n**This section has some very specific instructions -- please read closely!**\n\nLike HTTPS (our cool handshake), connections between your PC and GitHub also need some security. In this section, we'll generate an `SSH key`, a kind of identiifcation credential that helps GitHub understand that, essentially, you're _you_.\n\n#### Making a key\n\n- [ ] In your terminal, type the following command (again replacing relevant details with your specifics):\n\n```bash\nssh-keygen -t rsa -b 4096 -C \"YOUR ALLEGHENY EMAIL\"\n```\n\n- [ ] The process will ask for a location to save this new key; **do not enter anything** here -- this uses the default value which is OK for us\n- [ ] Provide a password for the key when the system asks, but **note that, when typing characters at the prompt, no text will appear** -- this is normal. `ssh-keygen` will request your password twice to ensure you've got it right\n\n#### Saving key on GitHub\n\n- [ ] In the terminal, type (or copy and paste): `cat ~/.ssh/id_rsa.pub`\n- [ ] This should print something that looks like gibberish to your screen\n- [ ] Copy the output starting at `ssh-rsa` to the end (your Allegheny email address)\n- [ ] Head over to GitHub\n- [ ] Locate and click your profile picture in the upper right corner of the screen\n- [ ] Select Settings from the resulting menu\n- [ ] On the next page, locate and click the `SSH and GPG keys` menu item\n- [ ] Click the `New SSH key` button (it's green)\n- [ ] Title your key something descriptive\n  * I'll offer: `YOUR NAME's PC`\n- [ ] Copy and paste that, if you like\n- [ ] Paste the gibberish in the `Key Field`\n\nAgain, _keep your terminal open_ for the next part.\n\n#### Putting it all together\n\nLet's test what you've done so far.\n\n- [ ] Head to our [GitHub course page](https://github.com/Allegheny-ComputerScience-302-S2022/), find the the entry marked with `week-0` and click it\n- [ ] On this page, locate and click the green `Code` button\n- [ ] From the `3` options, choose `SSH` and copy the link beginning `git@...`\n- [ ] In either `Atom` or `VS Code`, press `Shift` + `Control` + `P` (all together) to open the `Command Palette`\n- [ ] Type `clone` in the `Command Palette` window to search for the `git clone` options; choose this option and press `Enter`\n- [ ] In the resulting window, paste the link copied above in the `Clone From` field\n- [ ] Adjust the `To Directory` to `clone` the \"repository\" from GitHub to your PC\n- [ ] From the `File` menu, open the directory created by this `clone`\n- [ ] This folder should appear under the `Project` tab; if so, click into the `README.md` file in the `docs/` directory, and continue the exercise from there!\n",
        "cmpsc-302-week-1-basic-html-exercises-Yanqiao4396": "# `CMPSC 302` Web Development, Week 1: Basic HTML\n\n* Assigned: 28 February 2022, 1:30 PM\n* Due: 6 March 2022, 11:59 PM\n\nIn this week's activities, we will cover:\n* Basic HTML \"syntax\"\n* Learning to format text for the web\n* The Document Object Model (DOM)\n\n## The basics\n\nFormatting text for the web may seem trivial. However, a reasonable, rational shape for content is a feature\nthat many web pages on WWW still lack. A lot of this gets \"papered over\" in styling (a topic we'll cover in \na week or two), but it doesn't change the underlying fact that there's a lot of text online that's _just hard\nto read_.\n\nWe'll tackle these tasks by making a small collection of recipes, which have some basic requirements:\n\n* At least one \"unordered\" list (`ul`)\n* At least one \"ordered\" list (`ol`)\n* At least one paragrams (`p`)\n* At least two headings (`h...`)\n  * In addition to the title `h1`\n* At least one image (`img`)\n* A link (`a`) to the source\n  * Always credit your sources!\n\nAdd the above in the [1-recipe.html](docs/1-recipe.html) file.\n\nAbove all, that's what we're up to when we think about starting to learn basic HTML -- how do we make sense of\ncontent so that it makes sense for everyone else? Later, creating a rational structure will come in handy as we\nbegin to \"script\" (that is automate or give interactivity to) something called the Document Object Model (DOM).\n\n### What's this \"DOM\"?\n\nAt the highest level, the Document Object Model (DOM) is really a theory -- or an approach. While it's wormed\nits way into how certain systems are built (HTML being one), it's more like an agreement that we all make when\nwe write HTML: that we're making documents which have objects or sections that define them (\"nodes\") that can\nhave objects or sections that define _them_ (more \"nodes\"). \n\n![Yer a node](https://i.imgflip.com/66v6kw.jpg)\n\nIn essence, it's really a _tree_. We'll see what that means this week once we've put together an example we'll\nuse to illustrate it.\n\n## Making a GitHub Pages page\n\nThis assignment also requires you to make your work available via GitHub Pages. For a primer on where to find it\nand how to do it:\n\n- [ ] locate and click the `Settings` tab at the top of the screen\n- [ ] from the menu at the left, select `Pages`\n- [ ] locate the \"Source\" heading; set the \"Branch\" as `main`, and change the second drop-down to `/docs`\n- [ ] click `Save`\n- [ ] One last step: make the page _public_ by setting `GitHub Pages visibility` to `Public`\n\nA green box will appear at the top of the page listing the random URL that you've been assigned. This is your\nURL!\n\n## Accepting the assignment\n\n- [ ] Using either the link posted to our class Discord or the [course schedule](https://cmpsc302.chompe.rs)\n- [ ] Click the link provided for the lab assignment and accept it in GitHub classroom\n- [ ] Once the assignment finishes building, click the link to go to your personal repository assignment\n\n## \"Cloning\" a repository\n\n### Using the correct download link\n\n- [ ] On this repository's page, click the `Clone or download` button in the upper right hand corner\n* You may need to scroll up to see it\n- [ ] In the upper right corner of the box that appears, click `Use SSH`\n- [ ] Copy the link that appears in the textbox below the phrase \"Use a password with a protected key.\"\n\n#### Cloning\n\n* [ ] Type `ls` in your terminal window\n* You should be in your `~` directory\n- [ ] Find the folder you've made to hold class assignments (may involve `cd`ing)\n- [ ] Once there, \"clone\" the repository using the link copied above\n  * If I (the instructor) were to clone my own repository, I'd enter (your link will look different):\n\n```\ngit clone git@github.com:Allegheny-ComputerScience-302-S2022/cmpsc-302-week-1-basic-html-exercise.git\n```\n\n## Wrap-up\n\n### Submitting the assignment/saving progress\n\nThe GitHub platform is a place to store your work. So, it makes some sense that should be able to _clone_ (download) from it, and push back (upload) to it. Here, we'll learn this second part.\n\n- [ ] `cd` to your `~` folder\n- [ ] Locate your `cmpsc-302-week-1-basic-html-exercise` folder and `cd` to it.\n\nOnce in this folder, we need to tell git that there have been changes.\n\n- [ ] Type `git add -A` and press `Enter`\n* This tells git to look through the _entire_ folder structure for new changes and \"stage\" them\n\n- [ ] Type `git commit -m \"YOUR COMMIT MESSAGE\"` to \"label\" the commit\n* This is typically something like `git commit -m \"Fixing a typo\"` -- the message in quotes should be as descriptive as possible, while still remaining somewhat short\n\n- [ ] To send all changes to the server, type `git push`\n- [ ] At the prompt, input the password associated with the `SSH Key` you created earlier in this exercise (yesterday)\n\nOnce the process finishes successfully, we're done!\n",
        "cmpsc-302-week-1-basic-html-lab-Yanqiao4396": "# `CMPSC 302` Web Development, Week 1: Basic HTML (Lab)\n\n* Assigned: 4 March 2022, 1:30 PM\n* Due: 6 March 2022, 11:59 PM\n\n## Significant links for this assignment\n\n* [W3C validator](https://validator.w3.org/)\n* [DOM Tree Viewer](https://0xedward.github.io/dom-visualizer/)\n\n## Feeling validated\n\nToday's lab is an exercise in fixing broken web pages. In fact, it's so broken that it doesn't even show up\nin the browser -- _per se_ (it does, but not in a form you expect). This \"broken\" file lives in the [docs/1-recipe.html](docs/1-recipe.html)\nfile.\n\nDoing this work without at least _some_ helpful tools seems a bit daunting. However, there's at least one tool\nthat can give us some support: [the W3C validator](https://validator.w3.org/). (We briefly talked about W3C as\nthe \"standards\" folks who guard some specifications of good interneting -- these are the same people.) This site\nallows us not only to see what _errors_ exist, but what kinds of not-so-good-but-not-broken things we're doing\nwith our HTML. This is the first of a set of standards checkers that we're going to start using.\n\nHaving your HTML W3C-validated guarantees that a majority of browsers can show the content without issue -- at least\n_contemporary_ browsers. Lest we forget, there _are_ still folks out there using 10-year-old browsers. (That's true.)\n\n### Try it out\n\n* Find a website that you visit on a regular basis and run it through the validator\n* Keep notes on what happens: this will come up during the reflection\n\n## Applying this to your work\n\nYour goal today is to get _all_ of the pages in this site to clear W3C validation. \n\n* the [docs/0-recipe.html](docs/0-recipe.html) file already does\n* the [docs/index.html](docs/index.html) will require you to finish the content but isn't \"broken\", necessarily\n* the [docs/1-recipe.html](docs/1-recipe.html) file is, well...BUSTED!\n  * when finished, it is also a path to delicious\n  * I also understand that, for folks with ties to the state of Maryland, this might be emotional \n\nThis assignment has _one_ additional requirement, and I recommend doing this as one of the _last_ steps of the process -- _after_\nyou've `commit`ed and `push`ed your fixes to `docs/1-recipe.html`:\n\n* From your `week-1-examples...` repository, _carefully_ copy your `1-recipe.html` file to the `docs/` folder of this repository\n* Rename it `2-recipe.html`\n* Add it to the `index.html` page\n\n### Reflection\n\nThis lab also requires a reflection located in [docs/reflection.html](docs/reflection.html).\n\n* Once you've filled it out add it to the list of links in `index.html`\n\n### Note\n\nThis requires your Pages site to be **_public_**. When creating a GitHub Pages site for this assignment. See information\nbelow for a reminder about how to do this.\n\n## Making a GitHub Pages page\n\nThis assignment also requires you to make your work available via GitHub Pages. For a primer on where to find it\nand how to do it:\n\n- [ ] locate and click the `Settings` tab at the top of the screen\n- [ ] from the menu at the left, select `Pages`\n- [ ] locate the \"Source\" heading; set the \"Branch\" as `main`, and change the second drop-down to `/docs`\n- [ ] click `Save`\n- [ ] One last step: make the page _public_ by setting `GitHub Pages visibility` to `Public`\n\nA green box will appear at the top of the page listing the random URL that you've been assigned. This is your\nURL!\n\n## Accepting the assignment\n\n- [ ] Using either the link posted to our class Discord or the [course schedule](https://cmpsc302.chompe.rs)\n- [ ] Click the link provided for the lab assignment and accept it in GitHub classroom\n- [ ] Once the assignment finishes building, click the link to go to your personal repository assignment\n\n## \"Cloning\" a repository\n\n### Using the correct download link\n\n- [ ] On this repository's page, click the `Clone or download` button in the upper right hand corner\n* You may need to scroll up to see it\n- [ ] In the upper right corner of the box that appears, click `Use SSH`\n- [ ] Copy the link that appears in the textbox below the phrase \"Use a password with a protected key.\"\n\n#### Cloning\n\n* [ ] Type `ls` in your terminal window\n* You should be in your `~` directory\n- [ ] Find the folder you've made to hold class assignments (may involve `cd`ing)\n- [ ] Once there, \"clone\" the repository using the link copied above\n  * If I (the instructor) were to clone my own repository, I'd enter (your link will look different):\n\n```\ngit clone git@github.com:Allegheny-ComputerScience-302-S2022/cmpsc-302-week-1-basic-html-lab.git\n```\n\n## Wrap-up\n\n### Submitting the assignment/saving progress\n\nThe GitHub platform is a place to store your work. So, it makes some sense that should be able to _clone_ (download) from it, and push back (upload) to it. Here, we'll learn this second part.\n\n- [ ] `cd` to your `~` folder\n- [ ] Locate your `cmpsc-302-week-1-basic-html-lab` folder and `cd` to it.\n\nOnce in this folder, we need to tell git that there have been changes.\n\n- [ ] Type `git add -A` and press `Enter`\n* This tells git to look through the _entire_ folder structure for new changes and \"stage\" them\n\n- [ ] Type `git commit -m \"YOUR COMMIT MESSAGE\"` to \"label\" the commit\n* This is typically something like `git commit -m \"Fixing a typo\"` -- the message in quotes should be as descriptive as possible, while still remaining somewhat short\n\n- [ ] To send all changes to the server, type `git push`\n- [ ] At the prompt, input the password associated with the `SSH Key` you created earlier in this exercise (yesterday)\n\nOnce the process finishes successfully, we're done!\n",
        "cmpsc-302-week-2-basic-style-exercises-Yanqiao4396": "# `CMPSC 302` Web Development, Week 1: Basic HTML (Lab)\n\n* Assigned: 7 March 2022, 1:30 PM\n* Due: 13 March 2022, 11:59 PM\n\n## HTML with _style_\n\nToday we begin our journey into learning CSS styling, namely around basic selectors, inline versus block elements, \nthe basic rule of the \"box model\" and how go about implementing our style using an external file known as a `CSS stylesheet`.\n\nIf you were waiting to break free from Times New Roman on a white background, this is your time to shine.\n\nThis week's exercises have a few different prerogatives to follow, namely that CSS thrives on interoperability and reuse. \nPutting this principle into action will require some level of modification of the recipe _you found_ as you will see in \nthe requirements below. There's much more to think about as pertains CSS than we can cover in a few class sessions, so \nwe'll continue this work well into next week. But, by Spring Break, you'll be at least an intermediate HTML/CSS user.\n\n(Yes, you can walk around saying you're a PRO. I won't correct you.)\n\n### Requirements\n\n#### `docs/lorem-ipsum.html`\n\n* Use at least `2` `<strong>` and `<em>` tags\n\n#### `docs/lorem-style.css`\n\nThe `lorem-style.css` file must style the following `tag`s _at a minimum_:\n\n* `html`\n* `body`\n* `h1`\n* `a`\n  * including the new idea of \"pseduo-class\": `hover`, `visited`\n* `div`\n* `p`\n\n#### `docs/recipe-style.css`\n\nThe `recipe-style.css` file must both style the following `tag`s, `id`, and `classes`, _and_ be interoperable with \nthe recipe you found and added during last week's work. This _will mean_ \"refactoring\" (that is, revising) your \nwork to _at a minumum_ use the styling in the included stylesheet. You can, of course, go beyond that.\n\n`tag`s to style:\n\n* `html`\n* `section`\n* `h1`, `footer`\n  * You will need to add a `<footer>` element to _your recipe_ (`1-recipe.html`), likely\n* `ul`\n* `a`\n  * including \"psuedo-class\": `hover`, `visited`\n\n`id`s and `class`es:\n\n* `container` (`id`)\n* `detail-label` (`class`)\n* `detail-text` (`class`)\n\nDon't forget that this sheet should show up in the `<head>` of the `1-recipe.html` file!\n\n## Making a GitHub Pages page\n\nThis assignment also requires you to make your work available via GitHub Pages. For a primer on where to find it\nand how to do it:\n\n- [ ] locate and click the `Settings` tab at the top of the screen\n- [ ] from the menu at the left, select `Pages`\n- [ ] locate the \"Source\" heading; set the \"Branch\" as `main`, and change the second drop-down to `/docs`\n- [ ] click `Save`\n- [ ] One last step: make the page _public_ by setting `GitHub Pages visibility` to `Public`\n  * This step is _required_ for your HTML and CSS to pass validation!\nA green box will appear at the top of the page listing the random URL that you've been assigned. This is your\nURL!\n\n## Accepting the assignment\n\n- [ ] Using either the link posted to our class Discord or the [course schedule](https://cmpsc302.chompe.rs)\n- [ ] Click the link provided for the lab assignment and accept it in GitHub classroom\n- [ ] Once the assignment finishes building, click the link to go to your personal repository assignment\n\n## \"Cloning\" a repository\n\n### Using the correct download link\n\n- [ ] On this repository's page, click the `Clone or download` button in the upper right hand corner\n* You may need to scroll up to see it\n- [ ] In the upper right corner of the box that appears, click `Use SSH`\n- [ ] Copy the link that appears in the textbox below the phrase \"Use a password with a protected key.\"\n\n#### Cloning\n\n* [ ] Type `ls` in your terminal window\n* You should be in your `~` directory\n- [ ] Find the folder you've made to hold class assignments (may involve `cd`ing)\n- [ ] Once there, \"clone\" the repository using the link copied above\n  * If I (the instructor) were to clone my own repository, I'd enter (your link will look different):\n\n```\ngit clone git@github.com:Allegheny-ComputerScience-302-S2022/cmpsc-302-week-2-basic-style-exercises.git\n```\n\n## Wrap-up\n\n### Submitting the assignment/saving progress\n\nThe GitHub platform is a place to store your work. So, it makes some sense that should be able to _clone_ (download) from it, and push back (upload) to it. Here, we'll learn this second part.\n\n- [ ] `cd` to your `~` folder\n- [ ] Locate your `cmpsc-302-week-2-basic-style-exercises` folder and `cd` to it.\n\nOnce in this folder, we need to tell git that there have been changes.\n\n- [ ] Type `git add -A` and press `Enter`\n* This tells git to look through the _entire_ folder structure for new changes and \"stage\" them\n\n- [ ] Type `git commit -m \"YOUR COMMIT MESSAGE\"` to \"label\" the commit\n* This is typically something like `git commit -m \"Fixing a typo\"` -- the message in quotes should be as descriptive as possible, while still remaining somewhat short\n\n- [ ] To send all changes to the server, type `git push`\n- [ ] At the prompt, input the password associated with the `SSH Key` you created earlier in this exercise (yesterday)\n\nOnce the process finishes successfully, we're done!\n",
        "cmpsc-302-week-3-basic-styling-Yanqiao4396": "# `CMPSC 302` Web Development, Week 3: Basic Style (Exercises, aka: golf)\n\n* Assigned: 16 March 2022, 1:30 PM\n* Due: 27 March 2022, 11:59 PM\n\n## Fore things\n\nToday we're going to test a bit of our knowldge about positioning by _playing golf_. That's right: golf, a subject\nthat I know nothing about except that it has lakes, sand, grass, and, occasionally, polite claps.\n\nWe're going to experience this through _positioning_, a topic that were going to cover broadly at the beginning\nand dive deeper into over the course of the week. We're also going to review some more about CSS selectors and, in the process\nlearn about how we can position things _relative_ to other things.\n\nIf that weren't enough, we're also going to work with our on-going garden lab as we learn more about positioning and how to \nmake columns from text and `div`s. \n\nOverall, an action packed week that has us doing something like..._fore_ (4) things.\n\n### Your task\n\nYour task is simple: get the `#ball` to be consistently concentric to (i.e. contained _completely_ within) the `#target` div.\nThis will require styling the position of the `#ball`, `#target`, or _both_! There are `8` holes to traverse; you're responsible\nfor building the 9th.\n\n#### How to play\n\n* \"Play\" each hole by moving the `#ball` in [docs/style/play.css](docs/style/play.css)\n  * The selectors are already populated\n\n#### How to design the 9th hole\n\n* Design the 9th hole by filling in selectors in [docs/style/course.css](docs/style/course.css)\n\nDon't forget to play and solve it!\n\n## Making a GitHub Pages page\n\nThis assignment also requires you to make your work available via GitHub Pages. For a primer on where to find it\nand how to do it:\n\n- [ ] locate and click the `Settings` tab at the top of the screen\n- [ ] from the menu at the left, select `Pages`\n- [ ] locate the \"Source\" heading; set the \"Branch\" as `main`, and change the second drop-down to `/docs`\n- [ ] click `Save`\n- [ ] One last step: make the page _public_ by setting `GitHub Pages visibility` to `Public`\n  * This step is _required_ for your HTML and CSS to pass validation!\nA green box will appear at the top of the page listing the random URL that you've been assigned. This is your\nURL!\n\n## Accepting the assignment\n\n- [ ] Using either the link posted to our class Discord or the [course schedule](https://cmpsc302.chompe.rs)\n- [ ] Click the link provided for the lab assignment and accept it in GitHub classroom\n- [ ] Once the assignment finishes building, click the link to go to your personal repository assignment\n\n## \"Cloning\" a repository\n\n### Using the correct download link\n\n- [ ] On this repository's page, click the `Clone or download` button in the upper right hand corner\n* You may need to scroll up to see it\n- [ ] In the upper right corner of the box that appears, click `Use SSH`\n- [ ] Copy the link that appears in the textbox below the phrase \"Use a password with a protected key.\"\n\n#### Cloning\n\n* [ ] Type `ls` in your terminal window\n* You should be in your `~` directory\n- [ ] Find the folder you've made to hold class assignments (may involve `cd`ing)\n- [ ] Once there, \"clone\" the repository using the link copied above\n  * If I (the instructor) were to clone my own repository, I'd enter (your link will look different):\n\n```\ngit clone git@github.com:Allegheny-ComputerScience-302-S2022/cmpsc-302-week-3-basic-style-exercises.git\n```\n\n## Wrap-up\n\n### Submitting the assignment/saving progress\n\nThe GitHub platform is a place to store your work. So, it makes some sense that should be able to _clone_ (download) from it, and push back (upload) to it. Here, we'll learn this second part.\n\n- [ ] `cd` to your `~` folder\n- [ ] Locate your `cmpsc-302-week-3-basic-style-exercises` folder and `cd` to it.\n\nOnce in this folder, we need to tell git that there have been changes.\n\n- [ ] Type `git add -A` and press `Enter`\n* This tells git to look through the _entire_ folder structure for new changes and \"stage\" them\n\n- [ ] Type `git commit -m \"YOUR COMMIT MESSAGE\"` to \"label\" the commit\n* This is typically something like `git commit -m \"Fixing a typo\"` -- the message in quotes should be as descriptive as possible, while still remaining somewhat short\n\n- [ ] To send all changes to the server, type `git push`\n- [ ] At the prompt, input the password associated with the `SSH Key` you created earlier in this exercise (yesterday)\n\nOnce the process finishes successfully, we're done!\n",
        "cmpsc-302-week-4-basic-javascript-Yanqiao4396": "# `CMPSC 302` Web Development, Week 4: Basic Javascript (i.e. Simon)\n\n* Assigned: 30 March 2022, 1:30 PM\n* Due: 10 April 2022, 11:59 PM\n\n## Beep Boop; Beep Boop; BRR BRR BRR\n\nYour goal over the course of the next two weeks is to build a reasonably-function version of the hit Hasbro game, Simon.\n\n[![It was LIT](https://img.youtube.com/vi/G6p7zRsECaI/maxresdefault.jpg)](https://www.youtube.com/watch?v=G6p7zRsECaI)\n\nTo do this, we will learn the basics of Javscript, namely `events` and `functions`. This will fall in line with our understanding\nthat HTML and CSS largely _mean_ things and that Javascript _does_ things. However, there are a few steps that we'll look at along\nthe way, namely:\n\n|Step |Expected Date |\n|:----|:-------------|\n|Design (incl. mobile)| EOD, 1 April 2022 |\n|Functionality (i.e. playing the game| 10 April 2022 |\n\nThe above means that we'll likely get to actually _playing_ the game in the second week of the assignment. Our first goal is to\nmake the game UI workable. To do this, there are a few requirements.\n\n### Requirements\n\n#### Design\n\n* Full UI containing:\n  * 4 multicolored `<button>`s in either a \"radial\" (i.e. circle) design _or_ square grid design\n  * a footer which displays game name, `Start` button, and score\n* `<button>`s must be given IDs:\n  * `top-left`\n  * `top-right`\n  * `bottom-left`\n  * `bottom-right`\n  * `start-button`\n* The score display in the footer should be give the ID `points` (see above for required contents)\n* The design should be fully responsive, changing form when we hit the mobile \"breakpoint\", defined here as `1024px` (this definition varies)\n\n##### Wireframes\n\nTradtionally, when working on designs in the web space, you'll develop or be given \"wireframes.\" These can range from sparse to dense in \ninformation population. For the purposes of our assignment, they're relatively general.\n\n###### Desktop\n\n![On yr main](https://allegheny-computerscience-302-s2022.github.io/cmpsc-302-week-4-basic-javascript-solution/media/desktop-wireframe.png)\n\n###### Mobile\n\n![On the Go](https://allegheny-computerscience-302-s2022.github.io/cmpsc-302-week-4-basic-javascript-solution/media/mobile-wireframe.png)\n\n#### Functionality\n\n(Note: all functionality should be dictated by the `scripts/ui.js` file.)\n\n* Game \"activates\" when `Start` button clicked\n  * This should convert the \"Press Start to Play\" text to a \"Points: ##\" display (where `##` is the varying number of points\n* The game should generate random patterns that increase by 1 additional step after each \"successful\" round\n  * Here, \"successful\" means that a player achieved the demonstrated pattern in the given amount of time\n* The player's turn \"fails\" if they take more than `5 * level` seconds to enter any one part of the pattern\n  * `level` should be taken to mean the number of steps in the pattern\n* On each successfuly turn, a player's score should increase by `1`\n* If a player fails to complete the pattern, the start button should turn a \"Game Over\" button, and the game should stop.\n\n## Making a GitHub Pages page\n\nThis assignment also requires you to make your work available via GitHub Pages. For a primer on where to find it\nand how to do it:\n\n- [ ] locate and click the `Settings` tab at the top of the screen\n- [ ] from the menu at the left, select `Pages`\n- [ ] locate the \"Source\" heading; set the \"Branch\" as `main`, and change the second drop-down to `/docs`\n- [ ] click `Save`\n- [ ] One last step: make the page _public_ by setting `GitHub Pages visibility` to `Public`\n  * This step is _required_ for your HTML and CSS to pass validation!\nA green box will appear at the top of the page listing the random URL that you've been assigned. This is your\nURL!\n\n## Accepting the assignment\n\n- [ ] Using either the link posted to our class Discord or the [course schedule](https://cmpsc302.chompe.rs)\n- [ ] Click the link provided for the lab assignment and accept it in GitHub classroom\n- [ ] Once the assignment finishes building, click the link to go to your personal repository assignment\n\n## \"Cloning\" a repository\n\n### Using the correct download link\n\n- [ ] On this repository's page, click the `Clone or download` button in the upper right hand corner\n* You may need to scroll up to see it\n- [ ] In the upper right corner of the box that appears, click `Use SSH`\n- [ ] Copy the link that appears in the textbox below the phrase \"Use a password with a protected key.\"\n\n#### Cloning\n\n* [ ] Type `ls` in your terminal window\n* You should be in your `~` directory\n- [ ] Find the folder you've made to hold class assignments (may involve `cd`ing)\n- [ ] Once there, \"clone\" the repository using the link copied above\n  * If I (the instructor) were to clone my own repository, I'd enter (your link will look different):\n\n```\ngit clone git@github.com:Allegheny-ComputerScience-302-S2022/cmpsc-302-week-3-basic-style-exercises.git\n```\n\n## Wrap-up\n\n### Submitting the assignment/saving progress\n\nThe GitHub platform is a place to store your work. So, it makes some sense that should be able to _clone_ (download) from it, and push back (upload) to it. Here, we'll learn this second part.\n\n- [ ] `cd` to your `~` folder\n- [ ] Locate your `cmpsc-302-week-3-basic-style-exercises` folder and `cd` to it.\n\nOnce in this folder, we need to tell git that there have been changes.\n\n- [ ] Type `git add -A` and press `Enter`\n* This tells git to look through the _entire_ folder structure for new changes and \"stage\" them\n\n- [ ] Type `git commit -m \"YOUR COMMIT MESSAGE\"` to \"label\" the commit\n* This is typically something like `git commit -m \"Fixing a typo\"` -- the message in quotes should be as descriptive as possible, while still remaining somewhat short\n\n- [ ] To send all changes to the server, type `git push`\n- [ ] At the prompt, input the password associated with the `SSH Key` you created earlier in this exercise (yesterday)\n\nOnce the process finishes successfully, we're done!\n",
        "cmpsc-302-week-6-front-vs-backend-Yanqiao4396": "# `CMPSC 302` Web Development, Week 6: Front- vs. Back-end\n\n* Assigned: 11 April 2022, 1:30 PM\n* Due: 24 April 2022, 11:59 PM\n\n## Having a chat\n\n![o hai lets have uh chat](https://www.bestcat.com/files/variants/wqpfaohu4nwi1ycfi6pvs3rqx7h7/95276c0da81b822f513711c81fff742daadd87617d24212e679e52fc18befcd2/Tea_Party.jpg)\n\nThis project results in a basic chat server, i.e. an app that allows anyone to join and chat with anyone else present on the app's web page.\nMuch of this relies on concepts we've been learning over the last three or four weeks, and introduces a new way to use Javascript: via `nodejs`.\nWhile this may seem new -- and, to some extent is -- it's not a new language, just a _server-side_ (\"back-end\") implentation of Javascript.\n\n### Front- vs. Back-end\n\nThe section header appears to set up an oppositional relationship between these two \"layers\" of a web app. However, they're really the two\ncomplementary layers of anything that calls itself an \"app.\" Developers refer to the various configurations of layers that make up an \napplication as that app's \"stack.\"\n\nFor this project, you'll build _both_.\n\n#### Supreme clientele\n\nWe think of \"front-end,\" we're really thinking about everything that's _client_-side, that is HTML, CSS, and proper Javascript. Each of these\npieces are rendered (i.e. cobbled together) by the browser. The user accessing the site is referred to as a \"client\" in this case and all\nof this work is, essentially, their responsibility. Thankfully, modern browers take care of this.\n\n#### Behind your back\n\nAny functionality that's rendered by a third-party _server_ is often referred to as \"back-end.\" User browsers aren't responsible for this and\ngenerally this layer is described (in part) as a \"listener,\" waiting for a specific \"front-end\" client to ask to connect and retrieve information \nor (in our case) _stay connected_ to coordinate events like sending messages to everyone in a chat room.\n\n### Requirements\n\n#### Design\n\n* A two-row grid which features a chat input box and scrolling input window which changes based on screen width, per the wireframes below\n* A login \"modal\" (i.e. pop-over window) that requires users to set a user name before entering the chat\n* `HTML` form elements to accomplish user inputs for user names and chat messages\n\n#### Functionality\n\n* User name as a requirement to \"unlock\" the message form\n* Ability to send a message by pressing only `Enter` key in message entry\n* Connection to your Heroku `nodejs` server to transmit messages\n  * such that multiple parties can send and receieve messages in the main window\n* Ability to \"persist\" connections by sending \"ping\" messages on a regular basis\n  * \"Regular basis\" means once per second until a user quits the server\n  * \"quits the server\" just means \"closes the window\"\n* One additional feature that _you develop_ to implement\n  * if you're looking for ideas, the professor has many _tailored to you_!\n\nUsing the above basic functionality, a testing script should be able to send and receive `20` messages over a span of 4 minutes. This is _important_:\n\n* To pass this test, each your message must have the `.chat_msg` selector -- this can be done with any element, but _must be the right selector_\n  * If you're not passing the `[CHAT]` test, it's _likely_ that the above is the reason\n\n\n#### Writing\n\nThis assignment requires a bit of writing -- namely via a short description of your intended additional functionality [see above](#Functionality).\nTo complete the writing, finish the `TODO` in the `writing/` directory of the main folder of the repository. Use the `feature.md` file to:\n\n* describe the intended functionality in a paragraph no more than 150 words\n* describe _how_ you intend to implement it\n* in the code block provided in the file, paste the particular code you used to implement it\n  * wondering what a \"code block\" is? You'll know it when you see it.\n\n##### Wireframes\n\n###### Desktop\n\n![On yr main](https://chat.cmpsc302.chompe.rs/media/wireframe-desktop.png)\n\n###### Mobile\n\n![On the Go](https://chat.cmpsc302.chompe.rs/media/wireframe-mobile.png)\n\n#### Functionality\n\n## Making a GitHub Pages page\n\nThis assignment also requires you to make your work available via GitHub Pages. For a primer on where to find it\nand how to do it:\n\n- [ ] locate and click the `Settings` tab at the top of the screen\n- [ ] from the menu at the left, select `Pages`\n- [ ] locate the \"Source\" heading; set the \"Branch\" as `main`, and change the second drop-down to `/docs`\n- [ ] click `Save`\n- [ ] One last step: make the page _public_ by setting `GitHub Pages visibility` to `Public`\n  * This step is _required_ for your HTML and CSS to pass validation!\n\nA green box will appear at the top of the page listing the random URL that you've been assigned. This is your\nURL!\n\n## Setting up a Heroku app\n\n### Creating an app\n\nTo do the server (\"back-end\") part of this assignment, you'll need to head over to [Heroku](https://www.heroku.com) and create\na free account. Once you've created one:\n\n1. Log in and find the `New` button (it's in the upper left corner)\n2. Click `Create new app` and name it: `cmpsc-302-chat-server-YOUR_GITHUB_USERNAME`\n3. Click `Create app`\n4. On the resulting screen, locate the `Deployment` section\n5. Click `GitHub`\n6. Connect Heroku to your GitHub account\n7. Once you've linked the account, select the `Allegheny-ComputerScience-302-S2022` organization\n8. Search for your repository and link it\n9. As a final step, set up automatic deploy from the `main` branch\n\nOnce you've linked the repository, any `push` you make to your GitHub repository will also build the `app` directory on Heroku\nat the address:\n\n```\nAPP_NAME.herokuapp.com/\n```\n\n### Setting up \"Buildpacks\"\n\nTo tell the Heroku app exactly what it is (i.e. that it's a Node app) and that we need to build our app from the `app/` folder\n(rather than `docs/` -- the \"client\" side).\n\n1. Locate the `Settings` menu option near the top of the screen\n2. Scroll to the `Buildpacks` section\n4. Click `Add buildpack``\n3. Add the `https://github.com/timanovsky/subdir-heroku-buildpack.git` repository to the app\n4. Also search for and add the `heroku/nodejs` pack\n\n## Accepting the assignment\n\n- [ ] Using either the link posted to our class Discord or the [course schedule](https://cmpsc302.chompe.rs)\n- [ ] Click the link provided for the lab assignment and accept it in GitHub classroom\n- [ ] Once the assignment finishes building, click the link to go to your personal repository assignment\n\n## \"Cloning\" a repository\n\n### Using the correct download link\n\n- [ ] On this repository's page, click the `Clone or download` button in the upper right hand corner\n* You may need to scroll up to see it\n- [ ] In the upper right corner of the box that appears, click `Use SSH`\n- [ ] Copy the link that appears in the textbox below the phrase \"Use a password with a protected key.\"\n\n#### Cloning\n\n* [ ] Type `ls` in your terminal window\n* You should be in your `~` directory\n- [ ] Find the folder you've made to hold class assignments (may involve `cd`ing)\n- [ ] Once there, \"clone\" the repository using the link copied above\n  * If I (the instructor) were to clone my own repository, I'd enter (your link will look different):\n\n```\ngit clone git@github.com:Allegheny-ComputerScience-302-S2022/cmpsc-302-week-3-basic-style-exercises.git\n```\n\n## Wrap-up\n\n### Submitting the assignment/saving progress\n\nThe GitHub platform is a place to store your work. So, it makes some sense that should be able to _clone_ (download) from it, and push back (upload) to it. Here, we'll learn this second part.\n\n- [ ] `cd` to your `~` folder\n- [ ] Locate your `cmpsc-302-week-3-basic-style-exercises` folder and `cd` to it.\n\nOnce in this folder, we need to tell git that there have been changes.\n\n- [ ] Type `git add -A` and press `Enter`\n* This tells git to look through the _entire_ folder structure for new changes and \"stage\" them\n\n- [ ] Type `git commit -m \"YOUR COMMIT MESSAGE\"` to \"label\" the commit\n* This is typically something like `git commit -m \"Fixing a typo\"` -- the message in quotes should be as descriptive as possible, while still remaining somewhat short\n\n- [ ] To send all changes to the server, type `git push`\n- [ ] At the prompt, input the password associated with the `SSH Key` you created earlier in this exercise (yesterday)\n\nOnce the process finishes successfully, we're done!\n",
        "cmpsc-302-project-Yanqiao4396": "# `CMPSC 302` Web Development, Project\n\n* Assigned: 27 April 2022, 1:30 PM\n* Due: Various dates -- see table below\n\n## Project-ing yourself\n\nThe course project offers the opportunity to achieve one of a few outcomes based on your interest in extending a course project to a meaningful degree or developing\na short project of your own. Any of these objectives may be completed individually or in a small group numbering no more than `2` people. While outcomes will vary\ndepending on the type of project chosen. Due to the wide variance of projects set to be pursued, I require a few interim \"deliverables\" to be able to both assess\nand evaluate your plans along the way to ensure that projects are representative of both your individual skills and the basic learning objectives of the course.\n\n### Deadlines\n\nThe following table outlines general dates for submission of various materials. The expected contents of these materials will be further defined in the \ncorresponding documents linked in the third column.\n\n|Type of deliverable |Date            |Documentation                                 |Word count (min)   |\n|:-------------------|:---------------|:---------------------------------------------|:------------------|\n|Project description | 29 April, 5:00p|[Project description](writing/description.md) |150                |\n|Project update      | 6 May, 5:00p   |[Project update](writing/update.md)           |250                |\n|Project final report| 18 May 11:59p  |[Project report](writing/report.md)           |500                |\n\nFailure to submit any one of these pieces will cause the assignment to be considered \"Ignored\" under the terms of the course contract. \"Ignored\" assignments\nmean automatic failure in the course.\n\n### File requirements\n\nUnless otherwise convincing me in writing (likely in the [description](writing/description.md) document, you are required to:\n\n* deploy static page content in the `docs/` directory using GitHub Pages\n* deploy nodeJS content using the `app/` directory, likely using Heroku, though there are other services out there\n* share Web3 contracts using the `contract/` directory (you'll likely deploy elsewhere, but at least include it in your repository)\n  * depending on your level of experience, you may need to meet with me for a short tutorial of how to do this\n\n#### A note on Web3\n\nYour implementation of Web3 work _should cost you nothing_ (that means, no real tokens and no cash expenditure). To do this _be sure you are deploying\nto a testnet, preferably Rinkelby_.\n\n### Other requirements\n\n* Your `docs/` directory work should pass both the `HTML` and `CSS` validators\n* Pages should continue to pass basic accessibility checks (contrast, clear labeling)\n  * Based on the project you choose, these objectives might need to be adjusted\n\n## Kickstarting your process\n\nThe project should either:\n\n* extend a project we've achieved in class so far\n* implement a new project of your own design\n\nAs written above, no more than `2` people can work together on the project, and they _must submit the same repository_. This will mean:\n\n* using `branch`es\n* `Pull Requests`\n\nand other skills at your disposal to collaborate (if choosing the team path). Be sure you are either confident with these skills or open to a learning process\nif you choose the collaborative route.\n\n### Ideas for extending projects\n\nIf choosing to extend a project, I invite you to consider the following strategies:\n\n1. What project represented the area of web development that most excited you, or about which you want to learn more?\n2. Develop at least `5` ideas to choose from in extending the project.\n  * Meaningful project extensions include some concept or approach about which you're currently somewhat \"foggy\" (i.e. not 100% certain of)\n3. Copy the `docs/` and any other relevant folders _over_ those included in this repository\n\n### Ideas for developing projects\n\nFor those choosing to develop a project from scratch:\n\n1. What specific area or set of technologies would you like to explore most?\n2. Develop a short statement (no more than 1-2 sentences) defining the outcome for at least `3` potential projects.\n3. Consider the skills in which you feel you're strongest; how can you develop something potentially \"portfolio-worthy\"?\n\n## Making a GitHub Pages page\n\nThis assignment also requires you to make your work available via GitHub Pages. For a primer on where to find it\nand how to do it:\n\n- [ ] locate and click the `Settings` tab at the top of the screen\n- [ ] from the menu at the left, select `Pages`\n- [ ] locate the \"Source\" heading; set the \"Branch\" as `main`, and change the second drop-down to `/docs`\n- [ ] click `Save`\n- [ ] One last step: make the page _public_ by setting `GitHub Pages visibility` to `Public`\n  * This step is _required_ for your HTML and CSS to pass validation!\n\nA green box will appear at the top of the page listing the random URL that you've been assigned. This is your\nURL!\n\n## Setting up a Heroku app\n\n### Creating an app\n\nTo do the server (\"back-end\") part of this assignment, you'll need to head over to [Heroku](https://www.heroku.com) and create\na free account. Once you've created one:\n\n1. Log in and find the `New` button (it's in the upper left corner)\n2. Click `Create new app` and name it: `cmpsc-302-chat-server-YOUR_GITHUB_USERNAME`\n3. Click `Create app`\n4. On the resulting screen, locate the `Deployment` section\n5. Click `GitHub`\n6. Connect Heroku to your GitHub account\n7. Once you've linked the account, select the `Allegheny-ComputerScience-302-S2022` organization\n8. Search for your repository and link it\n9. As a final step, set up automatic deploy from the `main` branch\n\nOnce you've linked the repository, any `push` you make to your GitHub repository will also build the `app` directory on Heroku\nat the address:\n\n```\nAPP_NAME.herokuapp.com/\n```\n\n### Setting up \"Buildpacks\"\n\nTo tell the Heroku app exactly what it is (i.e. that it's a Node app) and that we need to build our app from the `app/` folder\n(rather than `docs/` -- the \"client\" side).\n\nThe order of operations matters here, so follow steps closely!\n\n1. Locate the `Settings` menu option near the top of the screen\n2. Scroll to the `Buildpacks` section\n4. Click `Add buildpack``\n3. Add the `https://github.com/timanovsky/subdir-heroku-buildpack.git` repository to the app\n4. Also search for and add the `heroku/nodejs` pack\n\n## Accepting the assignment\n\n- [ ] Using either the link posted to our class Discord or the [course schedule](https://cmpsc302.chompe.rs)\n- [ ] Click the link provided for the lab assignment and accept it in GitHub classroom\n- [ ] Once the assignment finishes building, click the link to go to your personal repository assignment\n\n## \"Cloning\" a repository\n\n### Using the correct download link\n\n- [ ] On this repository's page, click the `Clone or download` button in the upper right hand corner\n* You may need to scroll up to see it\n- [ ] In the upper right corner of the box that appears, click `Use SSH`\n- [ ] Copy the link that appears in the textbox below the phrase \"Use a password with a protected key.\"\n\n#### Cloning\n\n* [ ] Type `ls` in your terminal window\n* You should be in your `~` directory\n- [ ] Find the folder you've made to hold class assignments (may involve `cd`ing)\n- [ ] Once there, \"clone\" the repository using the link copied above\n  * If I (the instructor) were to clone my own repository, I'd enter (your link will look different):\n\n```\ngit clone git@github.com:Allegheny-ComputerScience-302-S2022/cmpsc-302-project.git\n```\n\n## Wrap-up\n\n### Submitting the assignment/saving progress\n\nThe GitHub platform is a place to store your work. So, it makes some sense that should be able to _clone_ (download) from it, and push back (upload) to it. Here, we'll learn this second part.\n\n- [ ] `cd` to your `~` folder\n- [ ] Locate your `cmpsc-302-project` folder and `cd` to it.\n\nOnce in this folder, we need to tell git that there have been changes.\n\n- [ ] Type `git add -A` and press `Enter`\n* This tells git to look through the _entire_ folder structure for new changes and \"stage\" them\n\n- [ ] Type `git commit -m \"YOUR COMMIT MESSAGE\"` to \"label\" the commit\n* This is typically something like `git commit -m \"Fixing a typo\"` -- the message in quotes should be as descriptive as possible, while still remaining somewhat short\n\n- [ ] To send all changes to the server, type `git push`\n- [ ] At the prompt, input the password associated with the `SSH Key` you created earlier in this exercise (yesterday)\n\nOnce the process finishes successfully, we're done!\n",
        "cmpsc-302-project-static-site-demo-Yanqiao4396": "# `CMPSC 302` Web Development, Project: Static Site Generator Demo\n\nAt this point in the semester, you're now able to navigate some larger systems which incorporate much of what we've learned\nvis-a-vis HTML, CSS, and other topics. For students who wish to pursue making portfolio sites -- of which there are a notable\namount -- this demo follows course instruction which will take you through some of the basics of using a static site generator.\nPart of this demonstration is also connecting this with a service called [Netlify](https://netlify.com) to deploy and host\nyour site. This about this resource as something like Heroku, but for only static sites.\n\nIn addition, this demo will expose you to [Hugo](https://gohugo.io/) a framework for building sites. Some folks choose to build\ntheir own templates using this project, but many more opt to use freely available templates called \"themes\" to build out their site.\nWhile premium paid-for themes exist, there is a [wealth of free themes available](https://hugothemesfree.com/) as well. \n\nIn this demo, we'll use a free theme called [KeepIt](https://github.com/Fastbyte01/KeepIt) live on [cmpsc-302-demo.netlify.app](https://cmpsc-302-demo.netlify.app/).\n\n## Relevant technologies\n\n* [Netlify](https://netlify.com)\n* [Hugo](https://gohugo.io/)\n\n## Following along with the demo\n\nFor many users, downloading the Hugo platform and running it \"locally\" (that is, on your PC) is the best way to develop and\nensure that you're getting the right content to the right place. This isn't strictly necessary, but saves much, much time\nover the course of page development. This approach comes highly suggested.\n\n### Create a Netlify account\n\n1. Go to [netlify.com](https://netlify.com) and create an account\n2. Once signed up and logged in, find the `Add a new site` button\n3. From the resulting menu click `Import an existing project`\n4. Select `GitHub` as your existing `git` provider\n5. Locate your project repository and connect it\n6. When picking your repository from GitHub, ensure that you've selected our class organization to find your repository\n\nOnce connected, like Heroku _used to_, your `push`es to GitHub will automatically build on the Netlify platform -- no extra\nsteps. This is the most popular and convenient way to continuously deploy your site.\n\n#### Note\n\nIf making a personal portfolio, it's very likely that you want to (and _should_) contiue with this project when this class is complete.\nWhile you'll always have access to your project repository in our organization, it's likely best if you move your work _out_\nof your repository to a new one that only you control.\n\nWe'll see a demo of this either at the end of this or the next class.\n\n### Modifying a theme\n\nMost themes operate using a filed called `config.toml`. This file contains settings particular to a given theme and is liklely to change\nbased on the theme chosen. For our demo theme (\"KeepIt\"), there're already some parameters set. You should experiment with changing\nthem and observing the results, learning where items change and what it takes to change them.\n\nNearly every theme contains a folder called `exampleSite` (or something very close) which contains a fully built-out `config.toml` that\nshowcases the way the theme should work. This is always your go-to guide for how to modify site settings like name, contact information,\nURL, et al.\n\n### Using a new theme\n\nThemes in Hugo typically come from other GitHub repositories. To download a new theme, most will suggest a new process called creating a\n_submodule_. This allows you to have a GitHub folder in your GitHub folder. The syntax for this is:\n\n```\ngit submodule add REPO_CLONE_LINK themes/NAME_OF_THEME\n```\n\nThis will register your site as _dependent_ on that theme -- meaning that any time the theme's author makes a change, when you \"deploy\"\nyour site, you will get the latest version of that theme. Though not all too frequent, this can mean that the author makes changes\nwhich break your site. This is why folks recommend running everything locally _first_ before deploying your site; this catches\nany small bugs introduced in upgrades.\n\nAt the end of this demo, you might try this out. This will involve changing a relevant value in `config.toml`.\n\n### Creating content\n\nAs the gist above suggests, different themes require different ways of creating new content. For our demo theme (KeepIt), it's relatively simple:\n\n* Create new blog posts in the `content/posts/` directory\n* Create new pages as files in the `content/` directory\n\nTo create a new blog post using `hugo`:\n\n```bash\nhugo new content/posts/second-post.md\n```\n\nThe above will live in the theme's `blog`.\n\nTo create a new page using `hugo`:\n\n```bash\nhugo new content/projects.md\n```\n\nThe above will be added to the site as a _page_ in the header, similar to `about`.\n\nThese files are in Markdown, however. This is is the same format you've been using for writing lately. Like HTML, it contains `tags` which have\nsemantic meaning. This [cheatsheet](https://gist.github.com/lurch/717a99dcdf8963d48056a4dca76b2f33) will prove a helpful tool in remembering and\nreferencing the various tags. Here are some quick HTML equivalents to help you along:\n\n#### Tags\n\nHeadings are created by using `#` symbols:\n\n* `#` is equivalent to `<h1>`\n* `##` is equivalent to `<h2>`\n* and so on\n\nLists are created by using `*` symbols:\n\n```\n* This\n* is\n* a \n* list\n```\n\nThe above is the same as:\n\n* This\n* is\n* a\n* list\n\nOne thing to keep in mind: there should _always be space_ between the \"tag\" and the content, (e.g. `* List item`)\n\n### CSS\n\nThe KeepIt theme uses a version of CSS called SCSS. This operates on the use of variables to change certain overall colors or styles\nglobally rather than within an element. You can see more of what the theme defines/uses by peeking in:\n\n```\nthemes/keepitassets/css/_variables/default.scss\n```\n\nYou can make changes to these variables by posting the variable and change to:\n\n```\nthemes/keepit/assets/css/_custom.scss\n```\n\nFor now, though, let's just get the theme up and running and make some posts.\n",
        "cmpsc-302-project-reactjs-demo-Yanqiao4396": "# `CMPSC 302` Web Development, Project: Static Site Generator Demo\n\nJavascript has developed quite rapidly in the last 5-10 years, mostly in response to the ways that user experience demands dynamically-updating\nwindows to reflect realtime data. Javascript, being somewhat poised to facilitate this, became a target for development toward real-time interfaces.\n\nFor this demo, I've rewritten a version of CatChat in a framework called React, which focuses on \"stateful\" apps -- that is, apps that have a regularly\n(and constantly) updating \"state.\" Here, this make sense because new users and messages are frequently changing the \"state of play\" of the app, a way to\nthink about what app \"state\" means, colloquially.\n\n## Relevant technologies\n\n* [React.js](https://https://reactjs.org/)\n* [Babel](https://babeljs.io)\n\n## Following along with the demo\n\nThis demo is a full recreation that we will step through piece by piece. You'll quickly notice a few key things though:\n\n1. There is no longer any substantive HTML in the index.html document; that's part of the app's \"state\" now -- it's all in scripts/index.js\n2. The CSS is largely unchanged -- this is because all we're doing is using the React framework to populate the HTML we used in our nodeJS introduction\n3. HTML appears wholesale in the index.js file; this is `JSX`, and it's an extended set of components that allow us to write HTML directly in Javascript\n4. React _is still Javascript_, which means you may recognize a few small commands here -- it's not throwing out what we know, just presenting a new view of it\n\n## Adopting React for your project\n\nReact is centered around two main principles:\n\n* Components\n* State/Rendering\n\n### Components\n\nYou'll note that each HTML block originally dedicated to a specific function in the original code from Week 6 gets its own \"component.\" This allows us to script\nfunctionality that targets _only that use case_. For example, code associated with posting messages from the text area is dedicated to that component. The only\n\"global\" functionality is the socket communication itself, which makes sense given that it _also_ drives message _posting_.\n\n### State\n\nGiven that the app is organized around \"states\" -- that is, changes in the information displayed or provided at any given time -- the interface constantly re-renders\nany time the state changes. To see this, pop open your console and have a look what happens every time you post a new message to the chat! You should see a message\ntelling you that the actual message window is re-rendering. Every. Time. We. Post. A. Message.\n\nThis happens one of a few ways. However, here, it happens because we use `setState`, functionality which re-triggers rendering on a component on which it's called.\nBecause we call `setState` in the `App` component, our interface slyly updates as new information appears.\n\n## Using React\n\nReact is a great candidate for projects that require interactivity like our chat or Simon game. For static sites or sites that don't change in real time, it's probably\ntoo much tech. However, even if you don't use it for your project, walking through this refactoring (i.e. revision) and comparing it against our previous platform\nshould make some of the merits clearer.\n \n"
    },
    "CMPSC 100: Computational Expression, Allegheny College Fall 2022": {
        "house-Yanqiao4396": "[![GatorGrader](../../actions/workflows/main.yml/badge.svg)](../../actions/workflows/main.yml)\n\n# SUDDEN SURGE OF RESIDENTIAL RENTERS: LOCAL LANDLORD MAKES A MODEST MINT\n\n> **The Reporter**\n>\n> 31 August 2022\n\n`(Andra)` \u2014 For months now, the neighborhoods in the suburbs of `term-world` have been ghost towns. The once-bustling streets of communities like `Andra` and `Folivoria` have been host to little more than the occasional tumbleweed ever since local property owner **The Landlord** raised rent rates to untenable levels in an attempt to only bring the best and brightest (and wealthiest) to our fair `term-world`.\n\nIn our exclusive interview with **The Landlord**, it was revealed that his able assistant **The Intern** argued that even properties with rock-bottom rent rates bring in more bacon than abandoned abodes. So, in a move that could only be called \"inspired,\" \"obvious,\" or maybe even \"capitalistically altruistic,\" **The Landlord** is slashing rates to less than a tenth of what they once were. That's right, you'll no longer need a six-figure income to call one of these fine houses with three-figure square footage yours.\n\nWord must've gotten out; nearly fifty new tenants have applied to live in the six neighborhoods owned and maintained by **The Landlord**. Only time will tell what these wide-eyed tenants will bring to `term-world`. ...\n\n## Overview\n\nIn this activity, we cover:\n\n* basic `term-world` commands\n* navigating using your \"terminal\"\n* file management best practices\n* executing Python files\n* an introduction to using the `git` protocol\n* an overview of the GitHub platform\n\nThe requirements of this exercise center on your ability to find your way around your house, unpack some boxes, remembering where you put things you unpack. You'll solve a few small puzzles in order to complete your lease and verify that your house is outfitted and working correctly.\n\n### SSH Keys\n\nThe activities for your first week in `term-world` all take place in your `house`. In order to access this material, you will first need to set up an `SSH` key. While we'll cover this in the opening days of class, here's a (long-ish) video detailing the process should you need a reminder later:\n\n[![SSH Key video]( http://img.youtube.com/vi/qEPjUGQFmzQ/hqdefault.jpg)](https://www.youtube.com/watch?v=qEPjUGQFmzQ&list=PLsYZRXov75ZHSwWiCk0-jd1RcTuu_-zmD&index=1)\n\n### Basic navigation\n\nOnce your SSH key is set up, you'll need to navigate to the `house` folder by running this command in your terminal window:\n\n```\ncd ~/house\n```\n\n`cd` is short for \"change directory,\" a command which moves you around the terminal to the various physical locations of `term-world`. The above command takes you _forward_, though you can also go _backward_ by using two \"dots\" (`..`) after your `cd` command _instead_ of the name of the folder you want to go to. For example:\n\n```\ncd ..\n```\n\ntakes us back to the folder we were just in. You can always tell where you are by looking at your `command prompt` -- the text before the blocky cursor that indicates where you're typing. The follwing prompt:\n\n```\n user    server   location\n|----| |--------| |\ndluman@term-world:~$\n```\n\ntells us that we're, well, ourselves (for me, it's `dluman`) on the `term-world` server, at the `~` location (think of `~` as a shortcut to your _home_ directory (which is different from your _house_).\n\nThis takes some time to adjust to, getting moved in to your house will give you more than enough practice.\n\n### Getting contents of your house\n\nRight now, the house is pretty empty. The output of another command, `ls` will show you this. Like `cd`, `ls` is short for something. In this case: \"list.\" Given that there's nothing there, it would be helpful to have _stuff_. Any time you want to _list_ a directory (i.e. see what's there) just type `ls` and press `Enter`.\n\nIf you've navigated away from your `house` folder, `cd` back to it. However, if you're there, we can populate your house with your things. They're currently stored on GitHub, the platform we use to do something called \"versioning\" our files. As with everything in our time in `term-world`, we'll get plenty more experience with the customs and protocols of living in our digital society.\n\nWe need to _accept the assignment_ that contains all of your `house` stuff so that we can move in!\n\n* [Click this link to accept the assignment](https://classroom.github.com/a/BQsFfQ50)\n\nOnce you've done that:\n\n```\ngit pull origin main\n```\n\nThis will `pull` all of the content for your house into _your_ `house` folder from the mysterious, but generous, \"cloud\" of `term-world`.\n\n### Map of the house\n\nTo assist with your wayfinding, all of the houses built in the various neighborhoods of `term-world` feature the same layout, depicted below.\n\n```\n -----------      --------\n|  KITCHEN  | -- | GARDEN |\n -----------      --------\n       |\n -------------               ---------\n| DINING-ROOM |             | BEDROOM |\n -------------               ---------\n       |                     /    \n -------------      ---------      --------\n| LIVING-ROOM | -- | HALLWAY | -- | OFFICE |\n -------------      ---------      --------\n```\n\nEach of these locations represent folders that you'll need to traverse in order to achieve the goals for this assignment. Notice that in several locations, \"you can't get there from here,\" as the saying goes; in some occasions there are _dead ends_. You'll need to practice moving from folder to folder using both [\"forward\" and \"backward\"](#basic-navigation) directions.\n\n### Unpacking a box\n\nThere are `5` boxes scattered throughout your house. Your job is to unpack them.\n\nEach box is a Python file -- this is the language that we'll be using to conduct this course. They work, well, \"out of the box,\" so there's no need to change or even look at any code. To open a box, let's say the `FragileBox.py` that's in the `kitchen`:\n\n```\npython FragileBox.py\n```\n\n`term-world` will narrate some of the story of the world and give you a choice of where to put the contents. You _can_ put items anywhere your house, but do you really need a `Couch.py` in the `kitchen`?\n\n(Someone is reading this right now and thinking \"Yeah, I _do_!\")\n\n#### An important lesson about `term-world`\n\nIf there exists only one rule about `term-world`, it's that you can _use anything_ you have the permission to use. Given the lesson we learned about opening boxes above, the `python` command seems to make this happen for us. So, if you were to find a `Couch.py` somewhere in your house, it might be interesting to\n\n```\npython Couch.py\n``` \n\nSomething equally curious _might_ happen.\n\n## `Evaluating house Content`\n\nEach week's repository is outfitted with a grader that can be used to evaluate your work for the week. In order to run the this grader for a given week's work, you'll need to first navigate to the \"root\" folder of the assignment (that is, the base folder containing a given assignment's work, such as `house` for this week):\n\n```\ncd ~/house\n```\n\nOnce there you'll need to run the following command:\n\n```\ngatorgrade\n```\n\nOnce the grader has finished running (it may take a couple minutes) you'll be presented with a series of checks that determine the overall \"completeness\" of your work. For instance, your output may look something like:\n\n```\n\u2714  Customize the nameplate (no TODOs)\n\u2718  Find the Ink hidden in the couch\n\u2718  Print the lease\n\u2714  Enter the house\n\u2718  Open the UltraHeavyBox\n\u2718  Open the FragileBox\n\u2718  Open the SinisterLookingBox\n\u2718  Open the TubeShapedBox\n\u2718  Open the BeatUpBox\n\n-~-  FAILURES  -~-\n\n\u2718  Find the Ink hidden in the couch\n\u2718  Print the lease\n\u2718  Open the UltraHeavyBox\n\u2718  Open the FragileBox\n\u2718  Open the SinisterLookingBox\n\u2718  Open the TubeShapedBox\n\u2718  Open the BeatUpBox\n\n        Passed 2/9 (22%) of checks for user-house-solved! \u2503\n\n```\n\nAs you can tell, there are some checks which have been satisfied, though there are many which have not. Be sure to have *all* of the checks required for your desired grade completed by the due date!\n\n## Submitting the assignment/saving progress\n\nThe GitHub platform is a place to store your work. So, it makes some sense that should be able to _clone_ (download) from it, and push back (upload) to it. Here, we'll learn this second part.\n\n- [ ] `cd` to your `~` folder\n- [ ] Locate the `house` folder and `cd` to it.\n\nOnce in this folder, we need to tell git that there have been changes.\n\n- [ ] Type `git add -A` and press `Enter`\n* This tells git to look through the _entire_ folder structure for new changes and \"stage\" them\n\n- [ ] Type `git commit -m \"{Commit message}\"` to \"label\" the commit\n* This is typically something like `git commit -m \"Fixing a typo\"` -- the message in quotes should be as descriptive as possible, while remaining somewhat short\n\n- [ ] To send all changes to the server, type `git push origin main`\n- [ ] At the prompt, input the password associated with the `SSH Key` you created earlier\n\nOnce the process finishes successfully, we're done!\n\n## Backup policy reminder\n\n**While we may use this server to store code, you are responsible for using GitHub as your main backup.**\n\nIn the event that the `term-world` server goes down for any unforeseen reason, your work may be lost. Though this server is backed up on a regular (i.e. weekly) basis, there is no guarantee that up-to-the-minute data for your work will be restored.\n\nRemember: to err is human; to back up your work is *divine*.\n"
    },
    "CMPSC 100: Software Innovation 1, Allegheny College Fall 2022": {
        "cmpsc-480-assignment-1-the-field-survey-Yanqiao4396": "# CMPSC 480: Assignment #1, the Field Survey\n\n`Due` 7 September 2022\n\n## Overview\n\nOur first assignment in the course is a set of surveys: one that will help me understand your personal goals for this class\nand another that you can use to start thinking about exploring the various directions that this course can take for you and\nyour classmates. The main questions we're interested in are those of what one field that catches your interest _looks like_.\n\nGiven that there are a wide variety of \"end game\" scenarios for everyone in the course, this assignment features a few paths.\nI ask, however, that for now you stick with one and complete this work using one area on which to focus your attention.\n\n## Deliverables\n\n### The Goals Survey\n\nTo better plan how we complete activities, my experience teaching this course has shown me that it's helpful to know what each\nstudent in the course intends to get from the content. To that end, please fill out:\n\n* [The Goals Survey](https://forms.gle/FPFSGRMPLSJqs7J3A)\n\nI ask that this be completed by the start of class on Friday, earlier is always better. Depending on how closely the results\ncorrelate, we may take some course reorganization action to center on certain needs or desires.\n\n### The Industry Survey\n\nComplete this in the [`writing/report.md`](writing/report.md) file.\n\n#### Professional Edition\n\nPrepare a brief report on an industry of your choice. Mostly, this should sketch the contours of what kinds of opportunities\nare available and where conversations in the field happen. A basic response covers:\n\n* Professional organizations or trade groups that you'd consider joining or at least keeping up with\n* Certifications or other professional credentials you think might help you during your professional life (it can be a list)\n* Conventions, trade group meetings, or major discipline specific events that you think you might like to attend (virtually, even!)\n* Other things you're doing/have done/will do to be a part of a larger community in the area you're focusing on\n* Publications or newsletters that you see as important to subscribe to or read\n* Major media sites where professionals in the field discuss issues (this can be same or different than a publication, but usually is different)\n* What issues are currently \"hot topics\" in the industry\n* Where folks in the field go to find jobs (i.e. the most active job boards)\n\n#### Academic Edition\n\nFor folks looking at graduate schools or other academic opportunities:\n\n* Find `5` schools that interest you, but don't do this by looking at rankings; really _look_ and see what kinds of research is happening at a given location\n  * Examine the admissions requirements for these programs -- what do you need to have/do in order to apply?\n  * Do they offer fellowships or paid teaching positions?\n  * There are many more considerations to list than could fit; find the unique areas of each program; also identify patterns\n* Specify `2` faculty members that work in a field you're interested in or are already working; list some of their publications\n* Find at least `5` academic journals that appear to be active and significant in the field; list them and give a brief description of the kinds of work they publish\n  * What does it take to publish a paper in one of them?\n* Find research topics which are currently dominant in the field; list at least `3`\n* Discover conventions and other disciplnary gatherings particular to the field; depending on your chosen focus, these may be pretty small\n* A list or description of typical outcomes of a graduate-level education based on the programs you've chosen\n\n## Evaluation\n\nThese additional grade specifications contemplate that _all basic requirements are met to apply_. Because our course is broken into tiers for grading, I provide the guidelines for achieving them here:\n\n### `A` tier\n\n* Develop a short presentation or resource (i.e. links repository) from your findings\n  * Upload the slides to your repository in the `presentation` folder\n* Choose more than the minimum count for each item with a suggested total\n  * i.e. complete work for `7` schools rather than `5`\n* Provide additional information for topics such as credentials, degrees awarded in the field, et al.\n* Provide specific examples of conversations in the discipline you find interesting (i.e. a report on one \"newsworthy\" item\n\n### `B+` Tier\n\n* Choose more than the minimum count for each item with a suggested total\n  * i.e. complete work for `7` schools rather than `5`\n* Provide specific examples of conversations in the discipline you find interesting (i.e. a report on one \"newsworthy\" item\n",
        "cmpsc-480-assignment-2-opportunities-Yanqiao4396": "# CMPSC 480: Assignment #2, Finding Career Opportunities\n\n* Due: 16 September 2022\n\n## Supporting readings\n\n* [How to Read a Job Description](https://www.themuse.com/advice/how-to-read-job-description-keywords)\n* [How to Choose a Graduate School](https://www.northeastern.edu/graduate/blog/how-to-find-the-right-graduate-school/)\n\n## Overview\n \nWhether a job ad, graduate school application requirements, or guidelines for applying to a service program, the process of figuring out what recruiters or readers are looking for in your materials may appear to be a contest in mind-reading. It's clear that these documents are asking you to prove that your history, skills, and experience are the right combination of _something_, but what does that mean?\n\nYou can think of job listings as plot sketches for short stories about what a given organization does and what it thinks it is. This is more than just the specific industry, skills, or qualifications listed -- this also involes how a given company, school, or organization talks about _itself_.\n\nAnd, just as you are in control of your version of your career narrative and how you tell it, you possess equal agency in job or graduate school searches. In essence, you're looking for a place that you think continues your story. You just need to find it. Easy, right?\n\nUnfortunately, not so.\n\nThis week's exercise will help you start the process of finding and understanding what the employment landscape looks like for the various options you might be considering. \n\n## Assignment guidelines\n\nChoose one or more of the options below.\n\n* [Academic Edition](#academic-edition)\n* [Professional employment](#professional-edition)\n* [Service or government](#public-edition)\n\n### Academic Edition\n\n#### Your assignment\n\nIn `summary.md`, add information which profiles various graduate school programs. This isn't a final list; this exercise will introduce you to the process of finding more applicable or interesting programs. It's designed to give you transferrable skills to use and begin exploring on your own.\n\n- [ ] Use the Academic programs programs list you compiled in the previous assignment\n  * Rank them `1` - `5` based on your current interest\n  * Label each entry with the school name and personal rank\n- [ ] In application guidelines and requirements find _and make a spreadsheet out of_:\n  * Required exams, minimum scores\n  * Number and type of transcripts required\n  * Requirements for personal statements\n  * Requirements for C.V. or other professional documents\n  * Number of recommendations requested or required\n  * Deadlines for all materials\n\n### Professional employment\n\nAllegheny College offers connections to several resources via the office of Career Education. These are split out by predominate type of listing below. Keep in mind that internships and full-time employment opportunities _can be listed_ on all of the sites below; some specialize in particular types, though.\n\n#### Your assignment\n\nIn `summary.md`:\n\n- [ ] Find three (3) listings that you're interested in\n* Choose 5 different colors.\n  * Using thse colors, identify the 3-5 themes that emerge from the listing (like the author of [How to Read a Job Description](https://www.themuse.com/advice/how-to-read-job-description-keywords) suggests).\n* Write a brief summary of why this particular opportunity stands out to you\n* On a scale of `1` - `5`, rate:\n  * How ready you believe you are for this position\n  * Your level of interest in this position\n  * How practical you think this position is given your skills or knowledge gap\n\nUpload the highlighted ads as images, PDFs, or graphic file formats.\n\n#### Full-time employment\n\n---\n\n* [Handshake](https://allegheny.edu/handshake)\n* [ImaginePittsburgh](https://imaginepittsburgh.com/work/)\n* [Indeed](https://www.indeed.com/)\n* [LinkedIn](https://www.linkedin.com)\n\n#### Internships\n\n---\n\nThe resources listed above apply, but the following are focused on recent graduates or current students:\n\n* [WayUp](https://www.wayup.com/)\n* [Internships.com](https://www.internships.com/student)\n\n### Service or government\n\nIn `summary.md`:\n\n- [ ] Find three (3) listings that you're interested in\n* Choose 5 different colors.\n  * Using thse colors, identify the 3-5 themes that emerge from the listing (like the author of [How to Read a Job \nDescription](https://www.themuse.com/advice/how-to-read-job-description-keywords) suggests).\n* In a different color, highlight skills written in the listing which _match_ skills you already have\n  * Does the listing characterize these as \"required\" or \"desired\" skills?\n* In yet a different color, highlight skills written in the listing which are _skills you would need to learn_\n  * Does the listing characterize these as \"required\" or \"desired\" skills?\n* Write a brief summary of why this particular opportunity stands out to you\n* On a scale of `1` - `5`, rate:\n  * How ready you believe you are for this position\n  * Your level of interest in this position\n  * How practical you think this position is given your skills or knowledge gap\n\n#### Resources\n\n* [Idealist](https://www.idealist.org/en/)\n* [USAJobs](https://www.usajobs.gov/)\n\n### A tier\n\n#### Professional and Public Service\n\n* In a different color, highlight skills written in the listing which _match_ skills you already have\n  * Does the listing characterize these as \"required\" or \"desired\" skills?\n* In yet a different color, highlight skills written in the listing which are _skills you would need to learn_\n  * Does the listing characterize these as \"required\" or \"desired\" skills?\n* _If_ you have a resume, briefly have a look at it. In [summary.md](writing/summary.md) discuss the current\nstate of your resume and how well it does or doesn't fit the themes and characteristics that you've identified\n  * _If not_, think about themes and qualifications. Make a list of everything that you think which is relevant; we'll use this very soon\n\n#### Academic\n\nTime to think about your C.V. -- it's likely you don't have one. However:\n\n* Make a list of all of your academic achivements, awards, and involvement that relate to the field(s) you've chosen\n* Identify 3-5 themes that emerge from this list and your understanding of your academic narrative thus far\n* In [summary.md](summary.md) add a section that describes how you think these themes relate to your overall candidacy for programs\n  * This can be global, not per-program\n\n### B+ Tier\n\n#### Professional and Public Service\n\n* In a different color, highlight skills written in the listing which _match_ skills you already have\n  * Does the listing characterize these as \"required\" or \"desired\" skills?\n* In yet a different color, highlight skills written in the listing which are _skills you would need to learn_\n  * Does the listing characterize these as \"required\" or \"desired\" skills?\n\n#### Academic\n\n* Make a list of all of your academic achivements, awards, and involvement that relate to the field(s) you've chosen\n* Identify 3-5 themes that emerge from this list and your understanding of your academic narrative thus far\n\n",
        "cmpsc-480-assignment-3-professional-documents-Yanqiao4396": "# CMPSC 480: Assignment #3, Creating a R\u00e9sum\u00e9/CV\n\n* Due: 23 September 2022\n  * With an interim activity on `21 September 2022`\n\n## Supporting readings\n\n### R\u00e9sum\u00e9\n\n* [Inventorying your skills](http://sitesmedia.s3.amazonaws.com/career/files/2016/11/SkillsEmployersSeek.pdf)\n* [Kinds of r\u00e9sum\u00e9s](https://careerwise.minnstate.edu/jobs/resumecharts.html)\n* [R\u00e9sum\u00e9 Content & Sections](https://career.vt.edu/job-search/presenting_yourself/resumes/content.html)\n* [R\u00e9sum\u00e9 Inventory](https://tswqo1aqh6e4d9omrzpjqmtw-wpengine.netdna-ssl.com/career/files/2019/01/RESUME-REVIEW-CHECKLIST.pdf)\n\n### Curriculum Vitae (C.V.)\n\n* [C.V. vs r\u00e9sum\u00e9s](https://writingcenter.unc.edu/tips-and-tools/curricula-vitae-cvs-versus-resumes/)\n* [Examples of C.V.s](https://writing.colostate.edu/guides/page.cfm?pageid=1330&guideid=62)\n* [Starting your first draft](https://writing.colostate.edu/guides/page.cfm?pageid=1335&guideid=62)\n  * This links to a website section -- use all of the content in the right menu bar\n* [C.V. checklist](http://www.kumc.edu/Documents/counseling/Curriculum%20Vitae%20Review%20Checklist.pdf)\n* [How to Write a Grad School R\u00e9sum\u00e9](https://www.northeastern.edu/graduate/blog/how-to-write-a-grad-school-resume/)\n\n## Overview\n \n### Writing professional documents\n\nMany of you likely already have a document which functions as a r\u00e9sum\u00e9. For those of you who do not, or for those of you whose professional documents might need a bit more than a touch-up, this assignment offers the opportunity to use a variety of resources, including your peers, to develop a complete document which takes your career narrative work into account. Rather than the somewhat abstract terms that your narrative might use, your r\u00e9sum\u00e9 should be focused on the discrete and specific characteristics of either your education or current employment history which _demonstrate_ skills required of a professional position.\n\nI write \"r\u00e9sum\u00e9\" a lot in the above paragraph. For some of you, you'll be looking more squarely at a curriculum vitae (C.V.). Our readings this week highlight the differences between the traditional r\u00e9sum\u00e9 and C.V. In many places outside the United States (and increasingly _inside_ the U.S.), these terms are interchangeable. However, insofar as graduate schools, fellowships, and some professional positions require, the document requested is somewhat different. More often, programs are beginning to request r\u00e9sum\u00e9s. \n\nBased on your opportunity search conducted over the last week, make a choice as to which document is more appropriate for you.\n\n## Assignment guidelines\n\nDepending on the opportunity/opportunities that you're interested in pursuing, you'll choose to either create a r\u00e9sum\u00e9, C.V., or -- in a rare circumstance -- you might consider both. For this assignment, I'd likely err on the side of choosing the document you need more immediately (e.g. a r\u00e9sum\u00e9 for a full-time or internship posting).\n\nBy the end of this activity you should have completed a full draft of whichever document you've chosen following the guidelines below.\n\n### R\u00e9sum\u00e9\n\n1. A final product which:\n  * is _no more than_ a `1` page document\n  * \"passes\" the [r\u00e9sum\u00e9 review checklist](https://tswqo1aqh6e4d9omrzpjqmtw-wpengine.netdna-ssl.com/career/files/2019/01/RESUME-REVIEW-CHECKLIST.pdf)\n  * is included in this repository as a `.pdf` or `.docx` file (preferably a `.pdf` to preserve your formatting) in the `documents` directory\n2. A text-only version of the r\u00e9sum\u00e9 as a `.txt` or `.rtf` file\n  * This, while annoying, is actually essential to have\n  * It should preserve some amount of formatting and **_should not be_** just an export from a word processor\n3. Draft work completed as part of class activities in the `draft` folder\n4. A copy of the original posting that you used to tailor this document\n\n### C.V.\n\n1. A final product which:\n  * is a 1+ page document\n  * \"passses\" the [C.V. review checklist](http://www.kumc.edu/Documents/counseling/Curriculum%20Vitae%20Review%20Checklist.pdf) and general principles in Northeastern's [How to Write a Grad School R\u00e9sum\u00e9](https://www.northeastern.edu/graduate/blog/how-to-write-a-grad-school-resume/)\n  * is included in this repository as a `.pdf` or `.docx` file (preferably a `.pdf` to preserve your formatting) in the `documents` directory\n2. A copy of the original posting/program requirements that you used to tailor this document\n\n## A tier\n\nFor this tier, I am ask you to submit the preparatory work you did in order to submit your work. Place all of this in the `documents` folder under `supporting`.\n\n### R\u00e9sum\u00e9\n\nTailoring the following toward an opporunity you found during exploration done for `Assignment 2` or another discovered since then:\n\n  * a substantial list of skills (between 15 - 20 or more) derived from completing the [skills worksheet](http://sitesmedia.s3.amazonaws.com/career/files/2016/11/SkillsEmployersSeek.pdf)\n  * a brief (~150 word) summary of [which type of r\u00e9sum\u00e9]((https://careerwise.minnstate.edu/jobs/resumecharts.html)) you chose and why\n  * a reflection on peer feedback recieved during the `21 September 2022` workshop\n    * this should be at least 250 words, placed in the `reflection.md` document in the `documents` directory\n    * it should contemplate how you plan to implement feedback\n\n### C.V.\n\nThis work does not need to be formatted; it should likely just be a bullet-pointed list. Tailoring it toward an opporunity you found during exploration done for `Assignment 2` or another discovered since then. As you continue to work toward finishing this assignment, make decisions guided by that opportunity posting.\n\n  * using the [UNC Writing Center guide](https://writingcenter.unc.edu/tips-and-tools/curricula-vitae-cvs-versus-resumes/), a sketch of at least two organizational strategies considered for your final draft\n  * a brief (~150 word) rationale re: your choice of document structure and why it fits your goals\n  * a brief bullet list or written-out summary of actions you can take in the near term (1-6 months) to add new material to your C.V.\n  * a reflection on peer feedback recieved during the `21 September 2022` workshop\n    * this should be at least 250 words, placed in the `reflection.md` document in the `documents` directory\n    * it should contemplate how you plan to implement feedback\n\n## B tier\n\n### R\u00e9sum\u00e9\n\n  * a substantial list of skills (between 15 - 20 or more) derived from completing the [skills \nworksheet](http://sitesmedia.s3.amazonaws.com/career/files/2016/11/SkillsEmployersSeek.pdf)\n  * a brief (~150 word) summary of [which type of r\u00e9sum\u00e9]((https://careerwise.minnstate.edu/jobs/resumecharts.html)) you chose and why\n\n### C.V.\n\n  * using the [UNC Writing Center guide](https://writingcenter.unc.edu/tips-and-tools/curricula-vitae-cvs-versus-resumes/), a sketch of at least two organizational \nstrategies considered for your final draft\n  * a brief (~150 word) rationale re: your choice of document structure and why it fits your goals \n",
        "cmpsc-480-assignment-5-web-portfolio-Yanqiao4396": "# CMPSC 480: Assignment 7, Starting a portfolio\n* Due: 18 November\n  * With supporting assignments along the way\n\n## Supporting readings\n\nThis assignment assumes that you either:\n\n* do not have a portfolio site already\n* are interested in re/building a new one\n\nIf you already have a portfolio and would like to move forward with your existing site, your site must still comply with all of the content-based best practices (see the [projects](#including-projects) section).\n\n* [Why Every Job Seeker Should Have a Personal Website](https://www.forbes.com/sites/jacquelynsmith/2013/04/26/why-every-job-seeker-should-have-a-personal-website-and-what-it-should-include/)\n* [Getting Started with GitHub Pages](https://guides.github.com/features/pages/)\n* [Eleventy, a simpler static site builder](https://www.11ty.dev/)\n\n### Optional\n\n* [Google domains](https://domains.google/)\n \nNote: if you already have a site using Netlify or another provider, you do not need to rebuild it on GitHub pages; alternatively, if you would _rather_ build using another platform, please reach out to Technical Leaders or the instructor.\n \n## Overview\n \nThis assignment is meant to jump-start the development of a personal portfolio site. Resum\u0301es, elevator pitches, and  presentations  aside, the quality and novelty of your responses to real-world practical or theoretical issues through the discipline of computer science often rests on the more concrete work that you do. Projects generated by your interes in participating in software culture serve as practical, concrete expressions of skills enumerated in professional documents and conversations. Often functioning as a \"calling card\" and finishing touch for your presentation of your technical identity, web portfolios do one thing well: they _show your work_.\n\nBut, they're not the end-point of the conversation about your professional identity. If anything, they serve as one more \"entry\" or \"channel\" to the universe of your work.\n\n### Building a portfolio\n\nThis project should result in a GitHub repository from which to deploy your site that:\n\n1. Contains website markup/code using a theme whose choices (color, layout, opportunities and abilities) are consonant with the \"pre-work\" completed this semester\n2. Comprises itself from material which features at least content from your Resum\u0301es, developer narrative (in the form of personal statements or an \"About Me\" section), and any public projects targeted toward your current professional goals (see the [Projects section below](#including-projects))\n3. Provides links to your various professional social networks (including, but not limited to: LinkedIn, GitHub)\n4. Uses functionality to monitor and provide analytics data on visitors for your site; Google Analytics has become the de facto standard. However, tracking social media engagement can be a bit complicated{read some of Google's posts about understanding and [tracking social interactions](https://support.google.com/analytics/answer/6209874) and [understanding analytics](https://developers.google.com/analytics/devguides/collection/analyticsjs/social-interactions)\n5. Has a link to the final site and repository included below:\n6. Features a professional `README`, using a short \"About Me\" statement and other professional links\n\n`https://yanqiao-4396.netlify.app`\n\n1. A reflective statement in this repository's `reflection.md` file which addresses:\n\n* A brief description of your site build process (including challenges and solutions)\n* A summary of the audiences for which the site is built and how its overall form and content cater to their interests\n* How your design decisions are informed by the various professional documents you've completed this semester\n\n#### Using `11ty`\n\nPer `11ty` guidelines, you'll need:\n\n* `nodejs` > 12.0 or newer\n\nTo install a given template:\n\n1. `clone` the template to your repository directory, preferably as the `site` directory:\n\n```bash\ngit clone URL_OF_TEMPLATE site\n```\n\n2. `cd` to the `site` folder and `npm install`\n3. For _some_ themes (including the included example), `npm start` will launch a `localhost` server at port `8080`, visit it in your browser at [http://localhost:8080](http://localhost:8080)\n4. Other templates will likely have other instructions; **_pay attention to their `README.md`!_**\n\n### Including projects\n\nYour work (in any discipline) may encompass projects which do or do not include code. For every project, depending on format, any item you post to your professional portfolio site should adhere to the appropriate checklists below.\n\n#### Code-based projects\n\nA GitHub repository stored in your personal GitHub account which stores code for a project that:\n\n1. Follows platform best practices for project documentation (specifcally as they pertain to `README.md` files, many of which appear in the [GitHub Guide to Documenting your projects on GitHub](https://guides.github.com/features/wikis/))\n2. Contains full and complete source for the program; this includes installation and any needs for deployment\n3. Uses in-line comments or documentation to enhance understanding and code legibility\n4. Organizes itself according to practices like those proposed by this helpful repository\n5. Observes and implements licensure correctly (respecting Fair Use, other other contemporary conventions around licensing and copyright\n6. Appears in any combination of languages or scripts, keeping in mind that many different communities institute different kinds of best practices with regards to formatting and syntax\n7. Uses GitHub Flow best practices including branching, merging, and descriptive, professional documentation of process (i.e. commit messages, et al.)\n\nNote on GitHub repositories: adding the appropriate license is a requirement (in addition to the recommended documentation). [Consult this guide](https://choosealicense.com/) to understand the various licenses and how to use them.\n\n#### Content-based projects\n\nThe rules for these necessarily ambiguous projects are, themselves, necessarily ambigious. However, for any public project you wish to use as a portfoio item:\n\n1. Edit and revise to ensure documents are free of typographical or content-based issues\n2. Incorporate some element of design if the medium requires it (for example, revisit visual aesthetics for a Powerpoint presentation deck or other visual media)\n3. Include links to any relevant portions of the project which are hosted elsewhere\n4. Provide a brief 100-200 word description of the project which describes its source, intent, and outcome -- especially if the project had a public impact or outcome\n\n##### Blogs\n\nIf planning a blog, include (in the repository's `reflection.md`) a standard publishing schedule (e.g. frequency of posts, channels -- social media -- where this content will be shared, and how often).\n\n### \"Tiered\" grading\n\nThis assignment does not inherently have grading tiers. The work we complete along the way _will_, though. Given that this work will feed into your site's process, the end result of a higher-quality process _should_ lead to an inevitable higher-quality site.\n\n#### A note on working hours\n\nYou are welcome to work on this project during dedicated class time in your groups, and I suggest doing so as you will have the most direct support from instructors or Technical Leaders. Know, however, that projects like the above often require considerable \"off-hours\" labor and maintenance.\n",
        "cmpsc-480-assignment-6-site-planning-Yanqiao4396": "# CMPSC 480: Assignment 6, Site Planning\n\n* Due: 26 October 2022\n\n## Supporting readings\n\n* [Information Architecture | Web Style Guide](https://webstyleguide.com/wsg3/3-information-architecture/index.html)\n* [Jamstackthemes.dev's 11ty template library](https://jamstackthemes.dev/ssg/eleventy/)\n\n## Overview\n \nIn preparation of your upcoming web project, the deliverable for this assignment is a simple review of content for the website you plan to build. If you already have a website, this is an invitation/exercise in cataloguing the way everything is already built, revealing opportunities for\nclearing up the order of your site or completely re-imagining it.\n\n### Requirements\n\n#### Site goals\n\nOn a piece of paper or in a blank digital document, list all of the content that you expect to display on your site. Examples include (but are not limited to):\n\n* Biography paragraph(s)\n* List(s) of skills\n* List(s) of appropriate projects\n* Social media links\n* Professional documents\n* Media (videos)\n* Related descriptive text content\n\n#### Content\n\n* Attempt to group your content into categories. These may reflect either the pages (if you plan to have a multiple page site) or sections (if you're interested in a single-page or \"parallax\" design).\n* If you're planning to include media of any kind, what functional support will these features need? Make a note next to any features that may require site structure beyond simply pictures and text.\n\n#### Choosing a template\n\nThe document containing your inventory should be a guide toward the kinds of templates that you'll find most easy to work with. There are other 11ty template sites; however, consult the template site linked in the beginning of this document.\n\nChoose a template that contains the same kinds of information you've got in your inventory. Start working by trying to get it to build on GitHub Pages!\n\nIt's also perfectly understandable/possible that you won't find the right template. Though I caution against the labor involved in making your own template/design -- this is an option. You may decide, though, to migrate to a different site builder with a larger theme ecosystem. Consult the instructor or TLs to get some assistance in making a new site builder work for your platform of choice.\n\n## Evaluation\n\n### A tier\n\nComplete the sitemap in the tier below _and_ think about _wireframing_ a few pages. There are a couple tools that can faciliate this:\n\n* [Figma](https://www.figma.com/)\n* [Balsamiq](https://balsamiq.com/)\n\nIf using a \"parallax\" (i.e. single page) design, mock up the whole page using your template as a rough guide. If not, create at least three (3) pages using layouts from the template you've selected. Include these files in your `planning` folder.\n\n### B Tier\n\n#### Sitemap\n\nTo achieve the B tier for this assignment, include a diagram detailing the various menus, pages and sections that you've grouped your content into. You can create this in a visual format/tool of your choice, but the below is a simple flowchart-like figure that might serve as a basis for how you think about organizing your site visually and experientially.\n\nFor more on how to go about creating a diagram, checkout a subsection of the reading supporting this assignment: [\"Presenting Information Architecture\"](https://webstyleguide.com/wsg3/3-information-architecture/4-presenting-information.html). Include this file in your `planning` folder.\n",
        "cmpsc-480-assignment-7-revising-projects-Yanqiao4396": "# CMPSC 480: Assignment 7, Revising projects\n* Due: 2 November\n\n## Overview\n \nYour projects serve as your demonstration that you've got some field-relevant skill. Whereas your r\u00e9sum\u00e9 can _tell_ folks you've got talent, your projects\n_show_ it. For all software-contingent work--that is, for anything to do with a computer, really--the _ways_ your work appears can tell a future employer\nsomething about how well you can use platforms that they may use. This is especially true of GitHub, where there exist additional conventions beyond\nmerely showing the code.\n\nThis assignment intends to focus on what might seem like an obscure part of the web project `README`, the content revision section. This also covers a bit\nabout blogging, in case you're interested in doing so. However, my traditional caution applies, as I'll reiterate in that space below.\n\nLink all of your projects completed for this assignment in the table below. I expect at least `1` of any type (code, non-code, blog). This means you\nonly need to complete these steps for `1`.\n\n|Project | Link |\n|:-------|:-----|\n|`News Analyzer`  |`https://github.com/Yanqiao4396/News-analyser`|\n| `Gatorgrade` |`https://github.com/GatorEducator/gatorgrade`|\n|`Tarot Match` |`https://github.com/Yanqiao4396/tarot-match `|\n\n## Revising your projects\n\nDepending on whether you're working on a code project or not, there are different guidelines. Unfortunately, if you're including both code and non-code\nwork examples, you'll really need to follow _both_ sets.\n\n### Code-based projects\n\n#### Creating your own repositories \n\nFor each of your projects, move the repository to your _personal_ GitHub account. Employers can't access class organizations.\n\nTo do this:\n\n* `clone` the repository you want to move to your machine\n* Create a new repository on your personal account\n  * Click the `+` button at the top right of any GitHub page, next to your profile picture\n  * Choose `New Repository`\n  * Incidentally, if you don't have a profile picture, **add one now**\n    * A _professional_ one (doesn't have to be a picture of _you_)\n    *\n  * Also incidental--did you know you can now create [_profile_ `README`s](https://docs.github.com/en/account-and-profile/setting-up-and-managing-your-github-profile/customizing-your-profile/managing-your-profile-readme)?\n    * You might think about it; here's [an example from my favorite over-committer](https://github.com/hugovk/hugovk)\n    * Don't get lost in the snazzy plugins; this ain't MySpace (well, nothing really ever will be again)\n* Name the repository, _do not add a license or a `README`_!\n  * Make sure your GitHub username is the _owner_ (in the dropdown next to the repository name field)\n* Click `Create repository`\n* `cd` to the folder of the repository and type: `git remote remove origin`\n  * This removes the link to the previous repository\n    * But, don't worry, your original is still safe (we're just modifying the _local_ copy)\n* Be sure your repository's primary branch is `main`: type `git branch -M main`\n  * Or, if the output of `git branch` is a star next to `main`, you're good\n* Get ready for the magic: `git push origin main`\n\n#### Revising content\n\n1. Follows platform best practices for project documentation (specifcally as they pertain to `README.md` files, many of which appear in the [GitHub Guide to Documenting your projects on GitHub](https://guides.github.com/features/wikis/))\n2. Contains full and complete source for the program; this includes installation and any needs for deployment\n3. Uses in-line comments or documentation to enhance understanding and code legibility\n4. Organizes itself according to practices like those proposed by this helpful repository\n5. Observes and implements licensure correctly (respecting Fair Use, other other contemporary conventions around licensing and copyright\n6. Appears in any combination of languages or scripts, keeping in mind that many different communities institute different kinds of best practices with regards to formatting and syntax\n7. Uses GitHub Flow best practices including branching, merging, and descriptive, professional documentation of process (i.e. commit messages, et al.)\n\nNote on GitHub repositories: adding the appropriate license is a requirement (in addition to the recommended documentation). [Consult this guide](https://choosealicense.com/) to understand the various licenses and how to use them.\n\n### Content-based projects\n\nThe rules for these necessarily ambiguous projects are, themselves, necessarily ambigious. However, for any public project you wish to use as a portfoio item:\n\n1. Edit and revise to ensure documents are free of typographical or content-based issues\n2. Incorporate some element of design if the medium requires it (for example, revisit visual aesthetics for a Powerpoint presentation deck or other visual media)\n3. Include links to any relevant portions of the project which are hosted elsewhere\n4. Provide a brief 100-200 word description of the project which describes its source, intent, and outcome -- especially if the project had a public impact or outcome\n\n* If providing a PDF, be sure that it's an OCR-enabled (optical character recognition) PDF (that is, folks can use assistive reading technologies to read it or anyone can search it)\n* Most software that creates PDFs can render OCR PDFs; if not, there are a number of online services, but they all look like they want to steal your credit card\n\nYou might consider creating a \"personal brand\" for your documents that matches some aspect of your site design. This could be a graphical element, colors, or typeface.\nI recommend this for two major reasons:\n\n1. The documents have a consistent, professional look\n2. It's harder for someone to take your content as your own\n  * Though if you know me, I care very little about this actually happening\n\n### Blogs\n\nI caution against blogs out of clear personal bias. I've had a hard time maintaining them, despite best intentions. My experience is that most\nfolks suffer from the same problem. [This article from _The Guardian_](https://www.theguardian.com/culture-professionals-network/culture-professionals-blog/2011/nov/17/top-tips-successful-blog) has over\n20 individual concerns for a blog, some of which apply to _every post_. I only sell the _pain_ here, because little is more painful than staring\nat your website and seeing that your last blog post was 3 years ago.\n\nHowever, if you're going to include one, you really _must_ do a few things. Include answers to these questions\nin a new Markdown file in this repository:\n\n* What kind of content are you going to write?\n  * _Be specific_ -- no \"whatever i feel like atm\"\n* What's your publication schedule?\n* What's a given post's structure? How many words (on average)?\n* How would you define your writing style?\n* What's your plan for sharing content and reposting old content?\n* How do you plan to network (i.e. share) your blog with others like you?\n\n## Tiered grading\n\nThere's enough to do in this assignment. I expect that for final projects, any item included under the rubric of \"projects\" (as defined by the\nweb portfolio `README` and this document) will have this level of finish. There really isn't much else you can do, failing finding some public\nforum in which to release them, and I can't assume that's either of interest or the state of the project you're working on.\n\nSo, no tiered grading here.\n",
        "cmpsc-480-assignment-8-portfolio-review-Yanqiao4396": "# CMPSC 480: Assignment 8, Portfolio Review\n* Due: 11 November, end of class\n\n## Conducting a site audit\n\nThis assignment asks you to pair up with another student to review their portfolio site. The questions and criteria\nlisted below are based on the original assignment. Once complete, you need to share the results of this review\nwith the peer whose site you audited. See instructions for this below.\n\n## CMPSC 480: Portfolio Review Worksheet\n\nConduct a site audit according to the areas outline below. After you're with the [audit](#audit) portion, there's a\nshort [Q&A](#q-a) to conduct and use as a basis for a brief conversation. Use this file to take notes on the conversation \nyou have with your peer about their progress on their web portfolio. At the end your conversation, do not forget to share \nthis repository with them. To do so:\n\n1. At the GitHub page for this repo, locate and click the `Settings` tab\n2. On the resulting page, locate the click `Collaborators and Teams`\n3. Locate the green `Add People` button, and add your peer by username\n\nThe named user should be able to see your assignment repository.\n\n## Portfolio Review\n\n|Name of student reviewed |URL provided |\n|:------------------------|:------------|\n|  Nguyen Ngoc Mai                       |           None                                          |\n\n### Audit\n\nCheck off the criteria below as you review your peer's site. Place an `x` in the brackets to check off a requirement.\n\n- [x] The site builds\n- [x] Theme is personalized\n- [x] Theme color choices are reasonable, legible\n- [x] Site content displays rational organization\n- [x] Site content is professional*\n- [x] Site contains an \"About Me\" (statement or page)\n- [x] Site contains some form of skill summary, even if not a resume\n- [x] Site provides links to at least 1 social property\n- [x] Site contains a link to some form of at least 1 project \n- [None applicable ] If site has a blog, the owner has a content strategy \n\n* Here, \"professional\" means that content is relevant to the site author's main occupation and that there\nis a level of finish (i.e. copy looks \"clean,\" is reasonably well-written).\n\n#### Blog\n\nIf site owner does not have plans to implement a blog, delete this section and the last criteria in the table.\n\nNo blog\n#### Projects\n\nFor each project on the site, copy and paste Markdown below and complete it for each.\n\n##### Landing\n\n|Project Name |Project URL |\n|:------------|:-----------|\n|     landing        |     https://github.com/Mai1902/landing                                                  |\n\n- [ ] Code project uses a LICENSE file\n- [x] Code project uses a README file\n- [x] README contains installation or usage instructions\n- [x] Project documentation is presented professionally\n- [x] Project follows best practices of the language in which it is written\n- [x] Project follows a majority of the guidelines of [documenting GitHub repositories](https://docs.github.com/en/repositories/managing-your-repositorys-settings-and-features/customizing-your-repository/about-readmes)\n\n##### MachineLearning-VirtualTryon\n\n|Project Name |Proj|:------------|:-----------|\n|     MachineLearning-VirtualTryon        |https://github.com/Mai1902/MachineLearning-VirtualTryon/tree/main/src/project                                                |\n\n- [ ] Code project uses a LICENSE file\n- [x] Code project uses a README file\n- [x] README contains installation or usage instructions\n- [x] Project documentation is presented professionally\n- [x] Project follows best practices of the language in which it is written\n- [x] Project follows a majority of the guidelines of [documenting GitHub repositories](https://docs.github.com/en/repositories/managing-your-repositorys-settings-and-features/customizing-your-repository/about-readmes)\nect URL |\n##### DataAnalytic-Povertyv.IQ\n\n|Project Name |Project URL |\n|:------------|:-----------  |\n|     DataAnalytic-Povertyv.IQ        |    https://github.com/Mai1902/DataAnalytic-Povertyv.IQ                                            |\n\n- [ ] Code project uses a LICENSE file\n- [ ] Code project uses a README file\n- [x] README contains installation or usage instructions\n- [x] Project documentation is presented professionally\n- [x] Project follows best practices of the language in which it is written\n- [x] Project follows a majority of the guidelines of [documenting GitHub repositories](https://docs.github.com/en/repositories/managing-your-repositorys-settings-and-features/customizing-your-repository/about-readmes)\n\n#### Comment(s)i\n\nIn general, it works. Avatar is a creative way to show personality. But I personally feel there are some places to improve. The whole theme could be improved so that it could express yourself better. The project section has a great import of language percentage and the last update date. However, more pictures and visual tools could be applied to make it look better.\n\n### Q & A\n\nPlease ask the questions below and record their responses underneath the headings below.\n\n#### Describe the overall level of finish you've achieved so far with this project.\n\nThe overall level of finish is high. All the requirements except for blog are met.\n\n##### What concrete tasks have you completed?\n\nAll of them except for the blog\n\n##### What tasks have you identified that you still need to complete?\n\nI could add more detail about my projects. There is barely no description on the web\n\n##### What are the most challenging items that remain on your task list?\n\nCreate a gif on web\n\n### Feedback\n\nFor the site review, offer your general impressions of:\n\n* the project (i.e. the site)\n* the point in the process where the creator is\n  * keep in mind that sites are due on `18 November`\n* the overall level of completeness or \"finish\" of the project\n\nIn addition, consider what advice you might provide to the site creator, especially if you've solved similar issues\nthat they're facing.\n\nSome visual stuff to show your personality",
        "cmpsc-480-assignment-9-lightning-talk-Yanqiao4396": "# CMPSC 480: Assignment 9, Lightning Talk\n* Due: Various\n  * Starting 30 November\n\n## Overview\n \nThis assignment represents the culmination of your work creating a professional identity through a short \"lightning talk\" presentation. However,\nthere's a catch: _you're not presenting your own profile_: you're presenting _another student in the class_ (herein referred to as your \"subject\"\nmore than occasionally). Your pairing will be provided by the instructor.\n\nOf course, there are other rules. See below.\n\n## Guidelines\n\n### Format\n\n* between 4 and 5 minutes\n* composed of _a maximum_ of 5 slides which\n  * must contain _fewer than_ 10 words on a slide\n* exported as a `PDF` and placed in the `presentation` folder\n\n### Contents\n\n(This is not necessarily in the order that it might appear in your final presentation.)\n\n* an overview of your presentation subject which\n  * includes a short tagline which summarizes their professional motivations/plans\n    * e.g. \"a data scientist passionate about cat behavior\"\n    * e.g. \"dog data dork\"\n* a brief introduction to your presentation subject that\n  * presents their class year and major(s) and minor(s)\n  * future plans that indicate their next steps after this course/year\n    * this could be pursuing an internship or professional experience in a given industry\n* a brief inventory of the top 3 skills your subject has or is developing\n* a description of one project _or_ work experience which\n  * characterizes their professional profile\n  * provides one \"take-away\" that describes your subject's skills and interests\n* a summary that \"wraps up\" the presentation, leaving the audience with a short statment about why they do what they do\n* contains (somewhere) a link to their portfolio site\n* incorporates one additional area of information/set of facts which is up to you\n  * this must, however, remaining professional and relevant\n\n### Structural notes\n\n* Each presentation must start with some variant of:\n> I a proud/honored to intruduce `NAME` who is `TAGLINE`\n\n* Each presentation must end with the short \"why they do what they do\" statement\n\n## Obtaining information\n\nYou are responsible for interviewing your subject to arrive at answers which address all of the above areas. You will\nbe given in-class time to do this on `18 November`; if you don't get all of the responses you need, it is up to you\nto pursue the information via other means (including, but not limited to email or Discord)\n\n## Evaluation\n\nThese presentations will be evaluated on completeness according to the above inventory _plus_ a single question\nquestionnaire to which your subject will respond indicating how well you portrayed them in this presentation. This\nis not a tiered grading opportunity and students must--at a minimum--achieve all basic criteria in the [`Contents`](#contents)\nand [`Format`](#format) sections above.\n",
        "cmpsc-480-assignment-10-reflection-Yanqiao4396": "# CMPSC 480: Assignment 10, Course Reflection\n* Due: 20 December 2022, 12:00 PM\n\n## Overview\n \nThis assignment asks you to engage with and reflect on your work in this seminar. The questions engage your ability to\nthink metacritically about areas of growth, effort, and improvement. More than anything, this assignment should offer\nan opportunity for you to accurately assess future goals and plans, some of which may have developed late in the course.\n\nAs with the majority of our work this semester, the more seriously you weigh and respond these questions is proportional\nto the reflective value you will recieve from them. \n\nThese questions are organized into two main categories:\n\n* `Semester Review`\n* `Looking Forward`\n\nYou must complete all questions in each section to gain credit for this assignment. All responses should be written in the\n[writing/reflection.md](writing/reflection.md) document.\n\n## Evaluation\n\nResponses to this assignment will be evaluated based on completion. However, the instructor reserves the ability\nto classify responses as \"unsubstantial\" (i.e. only a few words, or not addressing the question). In this case, the \nassignment will be evaluated as [\"Incomplete\"](https://github.com/allegheny-college-cmpsc-480-fall-2022/course-materials/blob/main/CODE_OF_CONDUCT.md#incomplete-assignments) per the guidelines in the course contract."
    },
    "CMPSC 100: Computational Expression, Allegheny College, Spring 2023": {
        "garage-Yanqiao4396": "| Date              |          |\n|:------------------|:---------|\n| 23 January 2023 | Assigned |\n| 29 January 2023    | Due      |\n| Status            | [![GatorGrader](../../actions/workflows/main.yml/badge.svg)](../../actions/workflows/main.yml) |\n\n# SECURITY SENSATION BITES BACK: SUPERLATIVELY SECURED GARAGES GALORE\n\n**Reported by `The Reporter` on `TODO`**\n\n(Muufo) - Following the severe and sudden surge of new renters to vacant properties in `term-world`, a new blight seems to be bearing down on the otherwise blissful 'burbs of our tidy town. Incredibly, every single renting resident of `term-world` does not have access to all of the real estate being paid for.\n\nSome years back, the owner of these newly domesticated domiciles--yes, real estate mogul `The Landlord`--invested in top-notch `garage` security features like the `Keypad.py` to allow residents to secure their vehicles and other `garage`-worthy gear with simple four digit codes. Here at `TNN`, we've learned that due to an oversight in moving-out processes, none of the codes to those security features were obtained prior to the former tenants leaving; this has resulted in sweeping security setbacks for `The Landlord` and his many new tenants.\n\nThat's right, none of the new `term-world` inhabitants have access to their `garage` interiors. This confounded correspondent is curious to see what unfolds next for these terrifically unlucky tenants...\n\n## Addenda from the Mayor\n\n> Congratulations on moving into your new house, my citizens! I, the Mayor, have given you all a free Groomba\u2122 unit to help clear out your workshops so that you -- my\n> citizens -- can begin work on building our _new world_! Very exciting, yes.\n>\n> But, I'm not all that knowledgeable about these things. Two key points I remember from the manual which seem to be important facts: it can move 1 foot\n> every five seconds and the unit itself is 1 foot by 1 foot.\n>\n> _However_, the manufacturer did send out a recall for the units saying that they didn't work. I, your Mayor, am _far_ too busy to attend\n> to these things. You can probably fix it yourself.\n\n## Overview\n\nNot only do you have a `house`, but you also have a handy `garage` -- a place where you can complete some experimental devices using your `workshop`. Like with everything `term-world` (as the news above tells us) there's a catch: the garage has a keycode which no one wrote down, and no one remembers. We have to use a device to -- there's no way around it -- _break in_.\n\nOnce in, have a look around your `WIDTH` x `LENGTH` garage!\n\nIn this set of activities we cover:\n\n* basic Python syntax (i.e. way of \"speaking\" python)\n* performing simple calculations in Python using `operators`\n* first steps toward reading and working with a Python program\n* continued practice operating and acting within a programming environment\n\n### `KeypadCracker.py`\n\nThis device, the `KeypadCracker.py` has two (2) parts to it which create the first two (2) and last two (2) digits to our garage code. This means that the garage code as four (4) digits. Correctly computing the digits will allow you into your garage. Instructions for how to correctly arrive at this number are in the file itself.\n\n### `Keypad.py`\n\nOnce you believe you have the right number, you need to input it into the `Keypad.py`. To do so run the following in your terminal:\n\n`python Keypad.py --keycode YOUR_CODE`\n\n(Replace `YOUR_CODE` with the computed code.)\n\nWhen the number is correct, the `workshop` will open to you.\n\n### `RoboVac.py`\n\nYou'll notice that, when you enter the `workshop`, there's a lot of junk laying around. The Groomba\u2122 will clean this up for you, though you'll need to, as written, fix it. There are two well-defined areas of the code to fix (they're marked with `TODO`s). Once these are fixed, you should be able to use the dimensions of your `garage` to clean the junk out.\n\n## Previous Learning Objectives\n\nIf you wish to review previous learning objectives from our assignments, you can visit the [`Syllabus`](https://chompe.rs/100-syllabus) for helpful information. However, it's also important to make an effort to retain what we have covered thus far as we progress through the course sections of the `README` might be taken out.\n\n## Accessing `garage` Content\n\nThis time around, we will `clone` our repositories. This is the way we'll interact with `git` and GitHub for the remainder of the semester. We can consider a `clone` as something that's part download, part direct link. It's a similar relationship between that of GitHub, `term-world`, and our `house`.\n\nThe process has two (2) major parts.\n\n### GitHub\n\n- On your GitHub assignment page (i.e. _this_ page) locate the green `Code` button\n- Select the `SSH` link from options presented\n- `Copy` or click the button at the far right of the textbox on that screen\n\n![TW - Clone link diagram](https://user-images.githubusercontent.com/1552764/213940345-2e62ec2e-e017-40ff-b325-745f9e731041.png)\n\n### `term-world`\n\n![TW - Clone Repo](https://user-images.githubusercontent.com/1552764/213931807-993be051-59e4-4102-b183-8c65bacaadee.png)\n\n- In `term-world`, find the `Source Control` menu\n- Locate and click the `...` at the top right of the window\n- Choose `Clone` from the list of options\n- Paste the link copied above\n- Choose your home folder as the location into which to clone the repository\n\n## Evaluating `garage` Content\n\nJust like last week, the content for this week (and most every week to follow) is outfitted with a `grader` program that can be used to evaluate your work for the week.\n\nAgain, in order to run the `grader` for this week's work, you'll need to be in the topmost level of the `garage` folder (the same place you needed to be in order to successfully run the `git pull` command).\n\nOnce there, run the command:\n\n```\ngatorgrade\n```\n\nThe `grader` will take a few minutes to do its work, but once it's complete the program will populate your terminal window with a series of checks that gauge the overall \"completeness\" of your work. Be sure to have *all* of the checks completed by the due date!\n\n### `push`ing Content\n\nThe GitHub platform is a place to store your work. So, it makes some sense that should be able to download from it, and push back (upload) to it. Here, we'll learn this second part.\n\nBottom line: we need to tell git that there have been changes.\n\nObserve the list of files you've changed and add them to a staging area using the + button to the right of each file\nOnce these have been \"staged,\" attach a message to what we call a commit -- a \"packaging\" of the files to send to GitHub.\n\nTo follow this process:\n\n![TW - Commit and Sync](https://user-images.githubusercontent.com/1552764/213940290-23b12a8a-6283-492c-ab1c-66a801ba815e.png)\n\n## `term-world` Server Backup Policy\n\n**While we may use this server to store code, you are responsible for using GitHub as your main backup.**\n\nIn the event that the `term-world` server goes down for any unforeseen reason, your work may be lost. Though this server is backed up on a regular (i.e., weekly) basis, there is no guarantee that up-to-the-minute data for your work will be restored.\n\nRemember: to err is human; to back up your work is *divine*.\n",
        "yard-Yanqiao4396": "| Date              |          |\n|:------------------|:---------|\n| 30 January 2023 | Assigned |\n| 5 February 2023    | Due      |\n| Status            | [![GatorGrader](../../actions/workflows/main.yml/badge.svg)](../../actions/workflows/main.yml) |\n\n# BRAND NEW BEAUTIFICATION PROPOSAL PROMPTS `term-world` TENANTS TO TIDY UP\n\n*Reported by `The Reporter` from `TODO`, on `TODO`*\n\nLast week `The Mayor` unveiled a new beautification program in an effort to make `term-world` *the* spot to be. This is the latest in a long line of proposals, projects, programs, and plans that `The Mayor` has been fervently working on to drive both tourism and residency within `term-world`.\n\nThis particular program targets the tight-knit communities that lie on the outskirts of our fair `term-world`. The appeal of neighborhoods like `Qermiz` and `Shasha` has gone under the microscope, and according to `The Mayor`, it has been found sorely wanting.\n\nPartnering with `The Landlord` that exercises ownership over these despondent, dismal, and downright depressing domestic hovels, `The Mayor` has decreed that all building exteriors in the targeted communities must meet certain specific \"Beautification Standard\" metrics, within a week's time. Once the one week grace period is up, `The Mayor` is planning on leveraging his authority as `The Mayor` to evict non-compliant residents.\n\nThe Office of the Mayor also commented on a new plan to cultivate domestic agriculture for no other apparent reason than \"how hard could it possibly be?!\" Whether or not farms will come to festoon the very firmament of term-world seems to be part of the Mayor's Field of Dreams.\n\n## Overview\n\nIn this set of activities we cover:\n\n* functions: an essential part of good program design\n* comments: writing helpful documentation for yourself and others\n* more on variables with a focus on naming and data types\n* algorithmic thinking: learning to design programs\n\n### Key facts about your yard\n\n#### The `Luumba.py` (Treehouse)\n\n![Treehouse Diagram visualizing table below](https://user-images.githubusercontent.com/1552764/215453276-7d9aa375-c501-4d0a-8bd4-58c9453c7d05.png)\n\nThe dimensions for your treehouse are as follows (it's rectangular):\n\n|Dimension |Measurement       |Number         |Shape |\n|:---------|:-----------------|:--------------|:-----|\n|Walls |`18` \u00d7 `27` \u00d7 `7`     |`4`| Rectangle |\n|Roof                         |\n|Gables    |`12.73` \u00d7 `12.73` \u00d7 `18` |`2` | Triangle |\n|Roofing   |`12.73` \u00d7 `27`    |`2` | Rectangle |\n|Cut-outs                     | \n|Windows     | `8` \u00d7 `3` |`6` | Rectangle |\n|Entryway    | `5` \u00d7 `5`  |`1` | Square |\n|Allowance for tree | `4` (radius) | `1` | Circle\u2020 |\n\n`\u2020` Use `math.pi` for calculation\n\nUsing the above details, you should be able to cobble together (a minimum) `3` functions which represent the shapes you need.\n\n##### This ain't math class\n\nBecause this isn't a math test, I'll provide some reminders about formulae used in calculation:\n\n###### Circle\n\n$$ A = \\pi r^2 $$\n\n###### Rectangle\n\n$$ A = width \\times length$$\n\n###### Triangle\n\n$$ A = \\frac{1}{2} \\times leg^{2} $$\n\n#### The `Croomba.py` (garden)\n\nLucky you -- you've been given a garden and all of the responsibilities that come with tending and growing crops. You're allowed to grow whatever `Seed`s you can get from the `SeedCatalog.py`, but you need to figure out what kind of soil creates the best condition for all of your plants. Good thing `term-world` has (i.e. is _in_) the internet.\n\n|Machine |Functionality |\n|:-------|:-------------|\n|`SeedCatalog.py`|Dispenses `Seed` objects directly to `inventory` |\n|`Croomba.py`|Incorporates various agricultral machines to grow `Seed`s into full crops |\n\nSee the `Croomba.py` for more details.\n\nThis portion of the assignment will also introduce `term-world`'s `inventory` system. This system provides a way for you to transport objects around `term-world`, acquire goods, and (like any good consumer) `use` them. The commands below detail the functionality of the `inventory` system, and you can combine them in the \"algorithm\" that this section of the assignment requires -- in addition to the short engagement with coding requested above.\n\n#### Inventory\n\n`inventory` is a command that is used to carry different objects around `term-world`. You can only carry `10` object-units in your `inventory` (objects have varying weights).  In order to check whats in your inventory use the command:\n\n```\ninventory\n```\n\nYou will see a screen similar to that below:\n![Inventory screen showing three items](https://raw.githubusercontent.com/allegheny-college-cmpsc-100-spr-2023/course-materials/media/img/TW%20-%20Inventory.png)\n\n##### get \n\n`get` picks up an object from your current location. This commands destroys the objects in its current location. Make sure to use the **file name**.\n\n```\nget Tomato.py\n```\n\n##### use\n\nIf the object is `Consumable`, you can use the `use` command to \"use\" the object. If It does not have any function then `use` just removes the file. Only uses `1` object at a time.\n\n```\nuse Tomato\n```\n\n##### remove\n\n`remove` gets rid of an object from your `inventory`. You first use the name of the object, then you give the amount of objects you want to delete (If no amount is given then 1 is removed). If you give an amount higher then you have, all objects are removed.\n\n```\nremove Tomato 2\n```\n\n##### drop\n\n`drop` puts the object in your current location. You first use the name of the object, then you give the amount of objects you want to drop (If no amount is given then 1 is dropped). If you give an amount higher then you have, all objects are droped.\n\n```\ndrop Tomato 3\n```\n\nThis command will drop `3` `Tomato.py` files, using sequential numbering to differentiate them:\n\n```\nTomato.py\nTomato1.py\nTomato2.py\n```\n\nIf any more files are dropped they will continue to follow this numbering pattern. Picking up any of these files will give you a `Tomato` in your inventory.\n\n##### Soil composition chart\n\nThe chart below summarizes the percentage of your `inventory` that you'll need to have in order to create the correct soil.\n\nTo collect the ingredients for the various soils, head to the `dirt` pile in the `garden` and pick up the correct amount of dirt to try your luck with the `SoilMixer`! Each soil has\n\n|Type |Sand |Silt |Clay |\n|:----|:----|:----|:----|\n|Sandy|80%   |10%   |10%   |\n|Loamy|20%   |30%   |50%   |\n|Clay-y|10%  |10%   |80%   |\n\n#### Reflection\n\nThe `treehouse` also contains a `reflection.md` document. From this point onward in your experience in `term-world`, you'll be required to answer questions in the file as part of the assignment. Go there and have a look at the questions.\n\n## Access `yard` content\n\nThe activities for this week primarily take place in your `yard`. This is the last major structure making up your `home`.\n\n```\n                                  ----------\n                 ------------     | GARDEN |\n                 | WORKSHOP |     ----------\n                 ------------       /\n                    /              /\n----------     ----------      --------\n| HOUSE  |     | GARAGE |      | YARD |\n---------|     ----------      --------\n    |              |              |\n    |--------------|--------------|\n```\n\n\n## `term-world Server Backup Policy`\n\n**While we may use this server to store code, you are responsible for using GitHub as your main backup.**\n\nIn the event that the `term-world` server goes down for any unforeseen reason, your work may be lost. Though this server is backed up on a regular (i.e., weekly) basis, there is no guarantee that up-to-the-minute data for your work will be restored.\n\nRemember: to err is human; to back up your work is *divine*.\n",
        "hall-of-records-Yanqiao4396": "[![Review Assignment Due Date](https://classroom.github.com/assets/deadline-readme-button-8d59dc4de5201274e310e4c54b9627a8934c3b88527886e3b421487c677d23eb.svg)](https://classroom.github.com/a/ZHYiaHmG)\n\n| Date              |          |\n|:------------------|:---------|\n| 20 March 2023| Assigned |\n| 26 March 2023| Due      |\n| Status            | [![GatorGrader](../../actions/workflows/main.yml/badge.svg)](../../actions/workflows/main.yml) |\n\n# DATA DONE, MAYOR DECREES DECISIVE DEED: CITIZENS TO COMPUTE REPRESENTATIVE RESIDENT CRITERIA\n\n**Reported by `Official Mayor-Endorsed News` on `20 March 2023`**\n\nMaintaining a healthy community is _everyone's job_ and so is neighborhood surveillance! As the Mayor \ndescribed to O.M.E.N. (Offical Mayor Endorsed News), \"I, your Mayor, look to you, the great citizens\nof `term-world` to help define the ideal citizen contributors. To you, people of this fair city, I (your Mayor) ask for the profile of the most resilient, representative residents!\"\n\nAs O.M.E.N. has learned, this means trawling through much of the data kept at the newly-restored city `datamart` to uncover the statistics describing the very demonstrative denizens which detail the ideal community member. This data digs deep. Using words that O.M.E.N. was told to say, it covers all of the behaviors that a mindful member of `term-world` must aspire to. \"We've been collecting data on you, our citizens, this whole time!\" the Mayor reiterated.\n\nWill you, great residents of `term-world` help define the future of this digital world? The Mayor certainly hopes so, saying \"[y]our Mayor--of course, that's me--depends on you to compile every last criterion toward identifying the luminaries of our land!\" To those who meet the basic benchmarks go all the spoils! Just exactly what those spoils are, the Mayor's Office declines to say.\n\n## Overview\n\nIn this set of activities we cover:\n\n* `dictionary` data structures\n* a review of `list`s and `iteration` (`for`/`while` loops)\n* revisiting `functions`\n* exploring more basic data science\n\nYou'll complete one main task, supported by three sub-tasks:\n\n* An average of all columns of the data (main task), using\n  * a `function` that returns rows matching a minimum value in a given column (sub-task)\n  * a `function` that totals the numeric values of a given column (sub-task)\n  * a report of the average of a given column (sub-task)\n\nAs with `datamart`, there are plenty of opportunities for improvements to how you find various statistics about the data. Keep an open mind and a keen eye to the particularly annoying inconveniences of the `Processor` program.\n\n### Previous Learning Objectives\n\nIf you wish to review previous learning objectives from our assignments, you can visit the [`Syllabus`](https://chompe.rs/100-syllabus) for helpful information. However, it's also important to make an effort to retain what we have covered thus far as we progress through the course sections of the Readme might be taken out.\n\n## Completing `hall-of-records` content\n\nThe `hall-of-records` has just one file: `Processor.py`. Functionality of the `Processor` has largely been completed for you. The work left up to you is to write the `function`s required to produce the statistical report requested in the `reflection.md`.\n\nThis program uses one `global` variable to house the data in the table and the names of columns. Use:\n\n|Variable |Purpose |\n|:--------|:-------|\n|DATA\u2020     |Holds columns and data from table |\n\n`\u2020` This is a departure from the last assignment; see what conveniences `dictionary`s provide you!\n\n### `main.py`\n\nLeverges the `main` function to:\n\n* Work out options for the Processor's main menu\n* Provides _at least_ two `function`s outlined in the `task`/`subtask` breakdown above\n\n\n|Function name |Parameters  |Return type | Description                                               |\n|:-------------|:-----------|:-----------|:----------------------------------------------------------|\n|search_rows        |Field to search (`str`), term/number to search (`any`)       |`list`      |Returns _all_ rows which are greater than or equal to a given search criteria |\n|total_column       |Field to total (`str`)             |`int`       |Returns the total of all numeric data in a given column |\n\nYour [reflection](office/reflection.md) or [editorial](office/editorial.md) should report the outcomes of these operations.\n\n### Writing\n\nChoose one of the following.\n\n#### Reflection\n\nAll of the above tasks completed, finish the reflection located in the `office` folder.\n\n#### Protesting\n\nYou may protest completing this assignment by writing an `editorial.md` in the `office` _instead_ of a `reflection.md`. Doing so _does not mean_ not completing the code for this assignment. Rather, it indicates that you should compose an evidence-based argument that uses your analysis to persuade your fellow citizens to your cause.\n\n## Improvement Suggestions\n\nHere are some suggestions for improvements you can, **but are not limited to** use:\n\n|Improvement Suggestions |Description        |\n|:--------------------|:------------------|\n|Dictionaries         | Add function to edit data |\n|Dictionaries         | Add function to find the average of all columns (auto-averager) |    \n|Dictionaries         | Dictionaries\tFind most common entry in a column                |\n|Dictionaries         |\tSort a column (least to greatest, greatest to least)            |\n|Dictionaries         | Ability to update multiple cells with a formula                 |\n|Dictionaries         |\tAdd a function to calculate any single other statistical value (median, standard deviation, mode, etc.) |\n|Dictionaries         | Write the results of a given operation (average, standard deviation) _as a new column_ |\n|Conditional logic    |\tColor-code data presentation (uses the `rich` module) |\n|Data analytics       | Create a data plot using the `seaborn` module |\n|Files, JSON          | Overwrite data (i.e. save the table)          |\n\n**Make sure to link your issue with the pull request you used to make your improvement.**\n\n**If you are not following an improvement suggestion you need to have your improvement suggestion checked by the professor before proceeding.**\n\n## Backup Policy Reminder\n\n**While we may use this server to store code, you are responsible for using GitHub as your main backup.**\n\nIn the event that the `term-world` server goes down for any unforeseen reason, your work may be lost. Though this server is backed up on a regular (i.e. weekly) basis, there is no guarantee that up-to-the-minute data for your work will be restored.\n\nRemember: to err is human; to back up your work is *divine*.\n"
    },
    "CMPSC 310: Artificial Intelligence at Allegheny College, Spring 2023": {
        "activity05_searching-Yanqiao4396": "# CMPSC 310 Activity 5\n\n## Deadline: February 1 by 9:50am\n\n\n## Assignment\n\n-  For the fourth activity please provide a solution for the specified state space using your team's assigned algorithm.\n\n## Submission\n\nIn the [activity5.md](activity5.md) file, you will find a simple state space. Please use this state space and run through your assigned algorithm to find the path from start to goal.\n",
        "challenge01-Yanqiao4396": "# Challenge Problem 1\n\n## Deadline: February 3, 2023 by midnight\n\nNote: While high-level discussion is allowed and encouraged for the challenge problems, these problems should be completed and submitted individually.\n\n### Description\n\nAssume we have a search problem represented in the graph above. Answer the following questions.\n\n### Part 1: What path would breadth-first graph search return for this search problem?\n\n|S|A|\n|S|G|\n|A|B|\n|A|C|\n|B|D|\n|C|D|\n|D|G|\n|C|G|\nS -> G\n\n### Part 2: What path would depth-first graph search return for this search problem?\n\n|S|A|\n|S|G|\n|A|B|\n|A|C|\n|B|D|\n|C|D|\n|C|G|\n|D|G|\n\nS -> A -> D -> G\n\n### Part 3: What path would A* graph search return for this search problem? Specify any assumptions you made about the heuristic (values used).\n\n|S|A|\n|S|G|\n|A|B|\n|A|C|\n|B|D|\n|C|D|\n|C|G|\n|D|G|\n\nS -> A -> C -> D -> G",
        "activity08_classification-Yanqiao4396": "# CMPSC 310 Activity 8: Classification\n\n## Deadline: February 13 by 10:20am\n\n## Assignment\n\n-  Follow the instructor to go through the classification example given to you in a Colab notebook.\n- For each code block, add text explaining the code block.\n\n## Submission\n\nSubmit updated Colab notebook.\n\n\n",
        "challenge02-Yanqiao4396": "# Challenge Problem 2\n\n## Deadline: February 17, 2023 by midnight\n\nNote: While high-level discussion is allowed and encouraged for the challenge problems, these problems should be completed and submitted individually.\n\n### Description\n\nUsing the class activities, discussions, and research of the specific class in the `scikit-learn` API, answer the following questions.\n\n### Part 1: Assume you have a data set with 500 black and white images that are 15 x 15 pixels that is stored in the variable called `X`. When we run `X.shape` in `sklearn`, what is the second value that is returned in a tuple? What does this value represent?\n\nX.shape will return (500,225) within 500 stands for 500 images and 225 stands for the amount of pixel for each image.\n\n### Part 2: In a [RandomForestClassifier](https://scikit-learn.org/stable/modules/generated/sklearn.ensemble.RandomForestClassifier.html#sklearn.ensemble.RandomForestClassifier) what is the `random_state`?\n\nControls both the randomness of the bootstrapping of the samples used when building trees (if bootstrap=True) and the sampling of the features to consider when looking for the best split at each node (if max_features < n_features).\nA bootstrap sample is a sample that is bootstrapped from a larger sample. Bootstrapping is a type of re sampling where large numbers of smaller samples of the same size are repeatedly drawn\n### Part 3: In a [SGDClassifier](https://scikit-learn.org/stable/modules/generated/sklearn.linear_model.SGDClassifier.html) what is the `random_state`?\n\nUsed for shuffling the data, when shuffle is set to True. Pass an int for reproducible output across multiple function calls. It affects the start point of the algorithm (Stochastic Gradient Descent Algorithm) which will lead to different results\n",
        "gradebook-Yanqiao4396": "# CMPSC 310 Gradebook\n\nThis repository will store individual student grades in CMPSC 310, Artificial Intelligence, Spring 2023. If you have questions regarding a reported grade, please contact the instructor. If you would like to request a correction, please raise an issue and tag the instructor.\n",
        "activity09_image-manipulation-Yanqiao4396": "# CMPSC 310 Activity 9: Image Manipulation\n\n## Deadline: February 20 by 10:00am\n\n## Assignment\n\n-  Follow the instructor to go through the bitwise and masking \n\n## Submission\n\nSubmit created Colab notebook (`.ipynb` file) to this repository.\n\n\n",
        "challenge03-Yanqiao4396": "# Challenge Problem 3\n\n## Deadline: February 24, 2023 by midnight\n\nNote: While high-level discussion is allowed and encouraged for the challenge problems, these problems should be completed and submitted individually.\n\n### Description\n\nUsing the class activities and class discussions, answer the following questions.\n\n### Part 1: Assume you two black rectangle, called `rect1` and `rect2`, which are 100 by 100 pixels. Inside each of these squares there is a smaller white rectangle. Both white rectangles have their start (top left corner point) at (10,10) but one ends (bottom right point) at (50,90) and another one at (90, 50). These rectangles are shown below.\n\nWhat will the following functions return as the image?\n1. `bitwise_and(rect1, rect2)`\n2. `bitwise_or(rect1, rect2)`\n3. `bitwise_xor(rect1, rect2)`\n4. `bitwise_not(rect1, rect2)`\n\n![rect1](https://github.com/CMPSC-310-AI-Spring2023/challenge03/blob/main/rect1.png)\n![rect2](https://github.com/CMPSC-310-AI-Spring2023/challenge03/blob/main/rect2.png)\n\nTODO\n\n### Part 2: Consider an image classification problem. What do the following values of precision and recall mean in terms of the performance of the learning model?\n\n```\n              precision    recall    \n\n      A       0.72           1.00     \n      B       0.98           0.83         \n```\n\nTODO",
        "activity10_probability-Yanqiao4396": "# CMPSC 310 Activity 10\n\n## Deadline: March 1 by 9:50am\n\n## Assignment\n\n-  For the tenth activity please provide answer questions in [activity10.md](activity10.md) file.\n\n## Submission\n\nSubmit completed [activity10.md](activity10.md) file, with your answers to each question.",
        "activity11_distributions_bayes-Yanqiao4396": "# CMPSC 310 Activity 11\n\n## Deadline: March 3 by 9:50am\n\n## Assignment\n\n For the eleventh activity please:\n- answer TODO prompts in the \"Distributions\" section of the attached Colab notebook;\n- follow the prompt in the \"Bayes Algorithm\" section of the attached Colab notebook.\n\n## Submission\n\nSubmit completed Colab notebook.",
        "challenge04-Yanqiao4396": "# Challenge Problem 4\n\n## Deadline: March 3, 2023 by midnight\n\nNote: While high-level discussion is allowed and encouraged for the challenge problems, these problems should be completed and submitted individually.\n\n### Description\n\nExplore various Naive Bayes Algorithms in the given Colab notebook. Then, answer the following questions.\n\n### Part 1: Gaussian Naive Bayes\n\n1.   Give 1-2 sentence description of the distribution assumed in this algorithm.\n\nGaussian Naive Bayes assumes data from each label is drawn from a Gaussian distribution. Assuming a group of dataset are dropped into two ellipses based on their lables. Then the ellipses represent the Gaussian generative model for each label, with larger probability toward the center of the ellipses.\n\n2.   Provide your observations on the performance of this algorithm on the wine data (comparisons with other algorithms below are encouraged).\n\nGaussian Naive Bayes works well with an almost perfect precision and recall values\n\n### Part 2: Multinomial Naive Bayes\n\n1.   Give 1-2 sentence description of the distribution assumed in this algorithm.\n\nFeatures are assumed to be extracted from a multinomial distribution in the multinomial naive bayes. Instead of modelling data with Gaussian distribution, it models data with the best-fit multinomial distribution. It works well with counting and counting rate\n\n2.   Provide your observations on the performance of this algorithm on the wine data (comparisons with bayes algorithms below are encouraged).\n\nMultinomial Naive Bayes didn't do well like naive bayes. It probably is because normal distribution works better than multinomial distribution. That means each feature tends to be continuous than categorical\n\n### Part 3: Complement Naive Bayes\n\n1.   Give 1-2 sentence description of the distribution assumed in this algorithm.\n\nComplement Naive Bayes is somewhat an adaptation of the standard Multinomial Naive Bayes algorithm. Multinomial Naive Bayes does not perform very well on imbalanced datasets.\nComplement Naive Bayes is particularly suited to work with imbalanced datasets. In complement Naive Bayes, instead of calculating the probability of an item belonging to a certain class, we calculate the probability of the item belonging to all the classes.\n\n2.   Provide your observations on the performance of this algorithm on the wine data (comparisons with bayes algorithms below are encouraged).\n\nComplement Naive Bayes works worse than multinomial Naive Bayes. It has an accuarcy rate of 0.73. That represents the dataset is balanced\n\n### Part 4: Bernoulli Naive Bayes\n\n1.   Give 1-2 sentence description of the distribution assumed in this algorithm.\n\nIn Bernoulli Naive Bayes, each feature is considered as a binary variable that can take two possible values: 0 or 1.\n\n2.   Provide your observations on the performance of this algorithm on the wine data (comparisons with bayes algorithms below are encouraged).\n\nIt works terrible since our features are continuous than binary\n",
        "activity12_neuralnetwork-Yanqiao4396": "# CMPSC 310 Activity 12\n\n## Deadline: March 15 by 9:50am\n\n## Assignment\n\n For the twelfth activity please follow along with the instructor for the explanation of the implementation of a basic neural network from scratch, conduct experiments, and add comments to explain each function.\n \n## Submission\n\nSubmit properly commented `nn.py` program through GitHub.\n",
        "challenge05-Yanqiao4396": "[![Review Assignment Due Date](https://classroom.github.com/assets/deadline-readme-button-8d59dc4de5201274e310e4c54b9627a8934c3b88527886e3b421487c677d23eb.svg)](https://classroom.github.com/a/S8i0Ljb1)\n# Challenge Problem 5\n\n## Deadline: March 24, 2023 by midnight\n\nNote: While high-level discussion is allowed and encouraged for the challenge problems, these problems should be completed and submitted individually.\n\n### Description\n\nRun through the guide at [RNN guide](https://www.tensorflow.org/guide/keras/rnn). Then, answer the following questions.\n\n### Part 1: Keras\n\n1.   Give 1-2 sentence description of keras.\n\nTODO\n\n2.   Give a short explanation of the following:\n\n- `Embedding`\n-  `Dropout` \n\nTODO\n\n### Part 2: Unidirectional vs Bidirectional\n\n1.   Give 2-3 sentence explanation of how bidirectional RNNs are different from unidirectional RNNs.\n\n\n### Part 3: Add code\n\n1.   Include the code from \"Recurrent Neural Networks (RNN) with Keras\" guide that you ran (must show output) as a Google Colab notebook in your challenge 5 repository.\n\nTODO\n",
        "activity14_attention-Yanqiao4396": "[![Review Assignment Due Date](https://classroom.github.com/assets/deadline-readme-button-24ddc0f5d75046c5622901739e7c5dd533143b0c8e959d652212380cedb1ea36.svg)](https://classroom.github.com/a/8wOUokvO)\n# CMPSC 310 Activity 14\n\n## Deadline: April 7 by 9:50am\n\n## Assignment\n\n For this activity please follow along the [Attention Mechanism from Scratch tutorial](https://machinelearningmastery.com/the-attention-mechanism-from-scratch/) to write a Python implementation of the attention mechanism.\n \n## Submission\n\nSubmit completed and properly commented `attention.py` program through GitHub.\n\n",
        "activity15_transformers-Yanqiao4396": "[![Review Assignment Due Date](https://classroom.github.com/assets/deadline-readme-button-24ddc0f5d75046c5622901739e7c5dd533143b0c8e959d652212380cedb1ea36.svg)](https://classroom.github.com/a/ymop5HUw)\n# CMPSC 310 Activity 15\n\n## Deadline: April 12 by 9:50am\n\n## Assignment\n\n For this activity follow [Neural machine translation with a Transformer and Keras](https://www.tensorflow.org/text/tutorials/transformer).\n\n## Submission\n\n### dataset and preprocessing\n\nIn this project, the author used the dataset, Portuguese-English dataset. This dataset contains approximately 52,000 training, 1,200 validation and 1,800 test examples.\n\nAfter the dataset is imported and examples are fetched. Those raw sentence data is transformed into encoded token IDs by tensorflow tokenizer model. Then token IDs should be detokenized into human readable sentences again. Within this process, punctuations are deleted and all words are lowercased. Some words are split into sub words like searchability is broke into search and ability\n\nThe tf.saved_model contains two text tokenizers, one for English and one for Portuguese. Both have the same methods.\nInput will be split into values and label where label will be the id of the next token.\n\nRaggeredTensor will be converted into Tensors\n\nThe resulting tf.data.Dataset objects are setup for training with Keras. Keras Model.fit training expects (inputs, labels) pairs. The inputs are pairs of tokenized Portuguese and English sequences, (pt, en). The labels are the same English sequences shifted by 1. This shift is so that at each location input en sequence, the label in the next token.\n\n### Transformer breakdown\n\nDuring the process of converting Portuguese into English, transformer model will accept numeric data which could be understood by computers. So before all other processing, we need a layer of code to convert those texts into vectors (numbers). Then to make transformer model to notice the matter of order, we add something called positional encoding\n\nThen a ADD and Norm step will ensure the value of vectors will be updated. It provides a direct path for gradient.\n\nFinally attention layer will be added to consult the whole context of a token.",
        "project-Yanqiao4396": "\n# Final Project: AI Application\n\n[![Review Assignment Due Date](https://classroom.github.com/assets/deadline-readme-button-24ddc0f5d75046c5622901739e7c5dd533143b0c8e959d652212380cedb1ea36.svg)](https://classroom.github.com/a/n7swNMZG)\n\n## Deadlines\n\n- _Project Proposal_: April 17th by 9am\n- _Project Demonstrations_: April 26th at 2:30pm\n- _Final Submission_: May 4th, by 9am\n\n## Table of Contents\n\n- [Final Project: AI Application](#final-project-ai-application)\n  - [Deadlines](#deadlines)\n  - [Table of Contents](#table-of-contents)\n  - [Summary](#summary)\n  - [Objectives](#objectives)\n  - [Code of Conduct](#code-of-conduct)\n  - [Assignment Specification](#assignment-specification)\n    - [Project Ideas](#project-ideas)\n    - [Baseline Requirements](#baseline-requirements)\n  - [Required Deliverables](#required-deliverables)\n    - [Project Proposal](#project-proposal)\n    - [Project Demonstration](#project-demonstration)\n    - [Project Submission](#project-submission)\n  - [Assignment Assessment](#assignment-assessment)\n  - [Receiving Assistance](#receiving-assistance)\n\n## Summary\n\nThroughout the semester, you have used various computational tools and techniques to explore a number of intelligent questions. The final project invites you to explore, in greater detail, a real-world application of artificial intelligence. You will research in more depth a real-world AI project that is interesting to you and carry out a computational investigation through the use, implementation, testing, and evaluation of different types of software.\n\nFor your final project, you can work individually or in groups of two or three. If you decide to work in a group, each member of the team will be evaluated separately based on his or her contributions to the project. This evaluation will be determined from the distribution of work as evidenced from the issue tracker, project report, and the feedback of the team members. You are also responsible for writing a detailed report, stored in the file `writing/report.md`. This is a Markdown file that must adhere to the standards described in the [Markdown Syntax Guide](https://guides.github.com/features/mastering-markdown/).\n\n## Objectives\n\nTo explore, implement and test an AI application using the knowledge and skills developed in class. To experiment designing a learning agent for the chosen application by using appropriate algorithms and software. To evaluate the performance of the AI agent used in the application and to reflect on its task environment. To reflect on the work conducted for the project and to highlight ethical issues raised in the completed AI application.\n\n## Code of Conduct\n\nThroughout the completion of this project you must adhere to the [community guidelines](https://github.com/CMPSC-310-AI-Spring2023/course_information/blob/main/community_guidelines.md) that we developed as a class. In addition to reporting any violations of the code of conduct using [this form](https://forms.gle/W6Kf2jt1DmmKEdAs6), please make sure that you attest to the fact that you followed the code of conduct. Students who think that the class should revise some aspect of the guidelines must use the GitHub issue tracker for that repository to suggest, discuss, and implement any required changes.\n\n## Assignment Specification\n\nFor the project assignment you may choose an AI problem that is of the most interest to you and can be investigated through computational technique(s). Pick something realistic and useful, for example, you can choose specific question(s) related to the topics we discussed in class. You may use anything and everything we have learned (or will learn) in class and you are expected to research additional resources beyond of what we discussed in class. You may also extend any of the programs or concepts we have developed in the labs or in class. However, the problem that you choose should not just be a copy of one of the lab assignments, or the class exercises, or the programs in the book with slight modifications. Remember, you must adhere to the Honor code! Please be original!\n\n### Project Ideas\n\n- Extend one of the labs.\n- Implement a new feature in [facial recognition project](https://github.com/Allegheny-Ethical-CS/facial_recognition_bias).\n- Implement a new feature in [fake news detection project](https://github.com/Allegheny-Ethical-CS/FakeNewsDetection)\n- Implement a machine learning and computer vision for the [gopigo robot](https://gopigo.io/).\n- Implement a new application using an existing AI tool (for example, using its API).\n\n### Baseline Requirements\n\n1. Select a real AI application to investigate.\n2. Research relevant background and find motivating references.\n3. Identify and utilize computational techniques for implementing your application (you may use existing tools and/or develop programs).\n4. Develop a learning agent to implement your application. You must write code (obviously).\n5. Testing of the implementation (either automated or manual). This should demonstrate that you tested your code.\n6. Experiments and the underlying results. These should showcase how your application performs under various conditions.\n7. Identify and reflect on ethical considerations involving your application.\n8. Demonstration of continuous work on the project as evidenced by the commits and work during lab sessions.\n\n## Required Deliverables\n\nThis assignment invites you to submit the following deliverables through your team repository.\n\n### Project Proposal\n\nDevelop a detailed proposal (at least 500 words) for your project including preliminary research on the importance of the application motivated by references. Write a description of what you propose to do for your project and share it with your instructor through your project GitHub repository. Your proposal should include at least three references that motivate and/or provide background for your project. You should also include some ideas for how you will implement your proposed application, specifically discussing potential tools or algorithms you maybe able to utilize for your project.\n\n### Project Demonstration\n\nDuring the lab session on April 26th you will demonstrate your project in the campus center lobby. While your project may not be fully complete by this time, you must have completed a large portion of it and have a demonstration that is working. After the demonstrations, you can use the feedback provided to you to finish your project before the deadline.\n\n### Project Submission\n\nYour programs should be stored in the `src` directory, be well documented and conform to basic styling conventions. Your report should contain detailed instructions on the tools and steps needed to run your system. Submissions without reproducible set up instructions will receive a grade reduction.\n\nYour final report should highlight the key contributions of your work and consist of at least 2000 words (you are welcome to integrate text from your proposal into your final report). The report should include a description of why the chosen application and solution is important and discuss the implementation that you undertook. The written material should be precise, formal, appropriately formatted, grammatically correct, informative, and interesting. In summary, your report should include:\n\n- The motivation for your project. Why is the question you decided to address important and useful?\n- Background for the proposed investigation. What have others done for it already? What resources have you used? Include references.\n- Detailed description of the work you completed for this project. Provide algorithms if necessary. If you extended an existing project, clearly explain what new components you have contributed to.\n- Testing that was conducted to ensure accuracy of your implementation.\n- Sample output. You can include it directly in your report, or if it is lengthy, put it into a separate document and reference it in your report.\n- Analysis of your experimental results. Make graphs, tables, snapshot of output, or anything else that can help us understand your results and incorporate them into your Markdown document.\n- Conclusion. Give a short overview of your project and its results. Describe what you learned, what were the biggest challenges and the biggest rewards. and the results of the experiments that were run.\n\n## Assignment Assessment\n\nThe grade that a student receives on this assignment will have the following components.\n\n- **GitHub Actions CI Build Status [up to 5%]:**: For project repository associated with this assignment students will receive a checkmark grade if their last before-the-deadline build passes. This is only checking some baseline writing and commit requirements. An additional reduction will given if the commit log shows a cluster of commits at the end clearly used just to pass this requirement. An addition reduction will also be given if there is no commit during lab work times. All other requirements are evaluated manually.\n\n- **Mastery of Verbal Explanation during Demonstration [up to 10%]:**: Since the ability to communicate technical details of a project is crucial to building successful software applications, a portion of students' project grade will be determined based on the quality of the project demonstration on April 26th.\n\n- **Mastery of Technical Writing [up to 20% (proposal 5%, report 15%)]:**: Students will also receive a checkmark grade when the responses to the writing questions presented in the `proposal.md` and `report.md` reveal a proficiency of both writing skills and technical knowledge. To receive a checkmark grade, the submitted writing should address all required components and have correct spelling, grammar, and punctuation in addition to following the rules of Markdown and providing conceptually and technically accurate answers.\n\n- **Mastery of Technical Knowledge and Skills [up to 65%]**: Students will receive the largest portion of their assignment grade when their project implementation reveals that they have mastered all of the technical knowledge and skills developed during the completion of this project. As a part of this grade, the instructor will assess aspects of the project including, but not limited to, the completeness and the correctness of the program(s), testing, the use of effective source code comments and Git commit messages, and the effective experimental analysis.\n\nAll grades for this project will be reported through a student's gradebook GitHub repository.\n\n## Receiving Assistance\n\nIf you are having trouble completing any part of this project, then please talk with either the course instructor during the lab session. Alternatively, you may ask questions in the Slack workspace for this course. Finally, you can schedule a meeting during the course instructor's office hours.\n"
    }
}